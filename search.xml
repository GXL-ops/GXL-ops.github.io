<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树状数组模板</title>
      <link href="/2022/04/05/basic-algorithm-template/shu-zhuang-shu-zu-mo-ban/"/>
      <url>/2022/04/05/basic-algorithm-template/shu-zhuang-shu-zu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h1><h2 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1. 问题引入"></a>1. 问题引入</h2><p>给出一个数组$nums$，完成以下操作</p><ul><li>将$index$上的数加上$val$</li><li>输出区间 $[l, r]$内每个数的和</li></ul><h2 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2. 前置知识"></a>2. 前置知识</h2><p>$lowbit(x)$ 运算，表示非负整数 $n$ 在二进制表示下最低位$1$及其后面的$0$构成的数值。</p><p>例如：$lowbit(44)=lowbit((101100)_2)=(100)_2=4$</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  1 0 1 1 0 0 (1)</span><br><span class="line">取反   0 1 0 0 1 1(2)</span><br><span class="line">加一   0 1 0 1 0 0(3)</span><br><span class="line">与操作 0 0 0 1 0 0   (4) 将(1)(3)进行与操作</span><br></pre></td></tr></tbody></table></figure><p>即 $lowbit(x) = x \&amp; (-x + 1)$</p><p>因为在计算机中是进行补码操作，所以 $lowbit(x) = x \&amp; -x$</p><h2 id="3-树状数组"><a href="#3-树状数组" class="headerlink" title="3. 树状数组"></a>3. 树状数组</h2><p>区间查询 =&gt; 前缀和 =&gt; 树结构维护，时间复杂度为 $O(log_2n)$</p><p>对于一个序列需要建立一个这样的结构：</p><ol><li>节点 $t[x]$ 保存以 $x$ 为根的子树中叶节点值的和，并将 $x$ 转化为二进制。</li></ol><p><img src="http://xiaomanzhan.com.cn/content/image-20220405163931678.png" alt="image-20220405163931678"></p><ol><li>计算 $lowbit(x)$ ，$t[x]$ 节点的长度就是 $lowbit(x)$</li></ol><p><img src="http://xiaomanzhan.com.cn/content/image-20220405164145452.png" alt="image-20220405164145452"></p><ol><li>观察上面存在的规律<ol><li>$t[x]$ 节点的父节点为 $ t[x+lowbit(x)]$</li><li>$t[x]=\sum^x_{i=x-lowbit(x)+1}nums[i]$</li><li>整棵树的深度为 $log_2n + 1$</li></ol></li><li>$add$ 操作</li></ol><p>以$add(index=3,\ val=5)$ 为例</p><p><img src="http://xiaomanzhan.com.cn/content/image-20220405164631676.png" alt="image-20220405164631676"></p><p>代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">while</span> index &lt;= n:</span><br><span class="line">        t[index] += val</span><br><span class="line">        <span class="comment"># index += lowbit(x)</span></span><br><span class="line">        index += index &amp; -index</span><br></pre></td></tr></tbody></table></figure><ol><li>$ask(x)$操作-前缀和操作</li></ol><p>以$ask(index=7)$ 为例</p><p><img src="http://xiaomanzhan.com.cn/content/image-20220405165103162.png" alt="image-20220405165103162"></p><p>代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ask</span>(<span class="params">index: <span class="built_in">int</span></span>):</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index:</span><br><span class="line">        ans += t[index]</span><br><span class="line">        <span class="comment"># index -= lowbit(x)</span></span><br><span class="line">        index -= index &amp; -index</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></tbody></table></figure><h2 id="4-代码总结"><a href="#4-代码总结" class="headerlink" title="4. 代码总结"></a>4. 代码总结</h2><ol><li><p>单点修改，查询前缀和</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">while</span> index &lt;= n:</span><br><span class="line">        t[index] += val</span><br><span class="line">        <span class="comment"># index += lowbit(x)</span></span><br><span class="line">        index += index &amp; -index</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ask</span>(<span class="params">index: <span class="built_in">int</span></span>):</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index:</span><br><span class="line">        ans += t[index]</span><br><span class="line">        <span class="comment"># index -= lowbit(x)</span></span><br><span class="line">        index -= index &amp; -index</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment"># add(x, k)</span></span><br><span class="line"><span class="comment"># ask(x)</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>单点修改，单点查询</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add(x, k)</span></span><br><span class="line"><span class="comment"># ask(x) - ask(x - 1)</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>单点修改，区间查询</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add(x, k)</span></span><br><span class="line"><span class="comment"># ask(r) - ask(l - 1)</span></span><br></pre></td></tr></tbody></table></figure><p>参考地址: <a href="https://www.bilibili.com/video/BV1pE41197Qj?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1pE41197Qj?spm_id_from=333.337.search-card.all.click</a></p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode307</title>
      <link href="/2022/04/04/leetcode/leetcode307/"/>
      <url>/2022/04/04/leetcode/leetcode307/</url>
      
        <content type="html"><![CDATA[<h1 id="307-区域和检索-数组可修改"><a href="#307-区域和检索-数组可修改" class="headerlink" title="307. 区域和检索 - 数组可修改"></a>307. 区域和检索 - 数组可修改</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个数组 nums ，请你完成两类查询。</p><ol><li>其中一类查询要求 更新 数组 nums 下标对应的值</li><li>另一类查询要求返回数组 nums 中索引 left 和索引 right 之间（ 包含 ）的nums元素的 和 ，其中 left &lt;= right</li></ol><p>实现 NumArray 类：</p><ul><li>NumArray(int[] nums) 用整数数组 nums 初始化对象</li><li>void update(int index, int val) 将 nums[index] 的值 更新 为 val</li><li>int sumRange(int left, int right) 返回数组 nums 中索引 left 和索引 right 之间（ 包含 ）的nums元素的 和 （即，nums[left] + nums[left + 1], …, nums[right]）</li></ul><p>示例 1：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">["NumArray", "sumRange", "update", "sumRange"]</span><br><span class="line">[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]</span><br><span class="line">输出：</span><br><span class="line">[null, 9, null, 8]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">NumArray numArray = new NumArray([1, 3, 5]);</span><br><span class="line">numArray.sumRange(0, 2); // 返回 1 + 3 + 5 = 9</span><br><span class="line">numArray.update(1, 2);   // nums = [1,2,5]</span><br><span class="line">numArray.sumRange(0, 2); // 返回 1 + 2 + 5 = 8</span><br></pre></td></tr></tbody></table></figure><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>==<strong>分块处理</strong>==，将数组分为大小为size的块，即块的总数为 $\lceil x \rceil$，用一个数组sums保存每个块的元素和，size取$\sqrt{len(nums)}$即可。更新块的时候只需要更新对应的块即可。下标index对应的块的下标为 $\lfloor \frac{index}{size} \rfloor$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        size = <span class="built_in">int</span>(n ** <span class="number">0.5</span>)</span><br><span class="line">        sums = [<span class="number">0</span>] * ((n + size - <span class="number">1</span>) // size)  <span class="comment"># 需要记住向上取整的操作</span></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            sums[i // size] += num</span><br><span class="line">        self.sums = sums</span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.sums[index // self.size] += val - self.nums[index]</span><br><span class="line">        self.nums[index] = val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumRange</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        b1 = left // self.size</span><br><span class="line">        b2 = right // self.size</span><br><span class="line">        <span class="keyword">if</span> b1 == b2:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>(self.nums[left: right + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(self.nums[left: (b1 + <span class="number">1</span>) * self.size]) + \</span><br><span class="line">               <span class="built_in">sum</span>(self.sums[b1 + <span class="number">1</span>: b2]) + \</span><br><span class="line">               <span class="built_in">sum</span>(self.nums[b2 * self.size: right + <span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>==<strong>构建线段树</strong>==，每个节点保存三个数据（起始节点位置，起始节点之间的数据信息和）。本题中出现了修改和求和操作，构建update递归函数对线段树进行修改操作，构建range递归函数对线段树进行范围求和操作。</p><p><strong>时间复杂度：</strong></p><ul><li>构造函数：$O(n)$</li><li>修改函数：$O(logn)$</li><li>范围求和函数：$O(logn)$</li></ul><p>空间复杂度：$O(n)$，只需要计算保存线段树的空间即可。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        self.n = n</span><br><span class="line">        self.seg = [<span class="number">0</span>] * (n * <span class="number">4</span>)</span><br><span class="line">        self.build(nums, <span class="number">0</span>, <span class="number">0</span>, self.n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], node: <span class="built_in">int</span>, s: <span class="built_in">int</span>, e: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> s == e:</span><br><span class="line">            self.seg[node] = nums[s]</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        m = (s + e) // <span class="number">2</span></span><br><span class="line">        self.build(nums, node * <span class="number">2</span> + <span class="number">1</span>, s, m)</span><br><span class="line">        self.build(nums, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e)</span><br><span class="line">        self.seg[node] = self.seg[node * <span class="number">2</span> + <span class="number">1</span>] + self.seg[node * <span class="number">2</span> + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span>, node: <span class="built_in">int</span>, s: <span class="built_in">int</span>, e: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> s == e:</span><br><span class="line">            self.seg[node] = val</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        m = (s + e) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> index &lt;= m:</span><br><span class="line">            self.change(index, val, node * <span class="number">2</span> + <span class="number">1</span>, s, m)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.change(index, val, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e)</span><br><span class="line">        self.seg[node] = self.seg[node * <span class="number">2</span> + <span class="number">1</span>] + self.seg[node * <span class="number">2</span> + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">range</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, node: <span class="built_in">int</span>, s: <span class="built_in">int</span>, e: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">if</span> left == s <span class="keyword">and</span> right == e:</span><br><span class="line">            <span class="keyword">return</span> self.seg[node]</span><br><span class="line">        m = (s + e) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> right &lt;= m:</span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">range</span>(left, right, node * <span class="number">2</span> + <span class="number">1</span>, s, m)</span><br><span class="line">        <span class="keyword">if</span> left &gt; m:</span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">range</span>(left, right, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">range</span>(left, m, node * <span class="number">2</span> + <span class="number">1</span>, s, m) + self.<span class="built_in">range</span>(m + <span class="number">1</span>, right, node * <span class="number">2</span> + <span class="number">2</span>, m + <span class="number">1</span>, e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.change(index, val, <span class="number">0</span>, <span class="number">0</span>, self.n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumRange</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">range</span>(left, right, <span class="number">0</span>, <span class="number">0</span>, self.n - <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><p>使用树状数组进行解题。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.tree = [<span class="number">0</span>] * (<span class="built_in">len</span>(nums) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums, <span class="number">1</span>):</span><br><span class="line">            self.add(i, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">while</span> index &lt;= <span class="built_in">len</span>(self.nums):</span><br><span class="line">            self.tree[index] += val</span><br><span class="line">            index += index &amp; -index</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ask</span>(<span class="params">self, index</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> index:</span><br><span class="line">            ans += self.tree[index]</span><br><span class="line">            index -= index &amp; -index</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.add(index + <span class="number">1</span>, val - self.nums[index])</span><br><span class="line">        self.nums[index] = val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumRange</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.ask(right + <span class="number">1</span>) - self.ask(left)</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 难度-中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 区域检索 </tag>
            
            <tag> 分块处理 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2022/04/03/leetcode/mian-shi-ti/"/>
      <url>/2022/04/03/leetcode/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="面试题-08-12"><a href="#面试题-08-12" class="headerlink" title="面试题 08.12"></a>面试题 08.12</h2><blockquote><p><a href="https://leetcode-cn.com/problems/eight-queens-lcci/">面试题 08.12. 八皇后</a></p></blockquote><p>设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。</p><p>注意：本题相对原题做了扩展</p><p>示例:</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入：4</span><br><span class="line"> 输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]</span><br><span class="line"> 解释: 4 皇后问题存在如下两个不同的解法。</span><br><span class="line">[</span><br><span class="line"> [".Q..",  // 解法 1</span><br><span class="line">  "...Q",</span><br><span class="line">  "Q...",</span><br><span class="line">  "..Q."],</span><br><span class="line"></span><br><span class="line"> ["..Q.",  // 解法 2</span><br><span class="line">  "Q...",</span><br><span class="line">  "...Q",</span><br><span class="line">  ".Q.."]</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>题解：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode744</title>
      <link href="/2022/04/03/leetcode/leetcode744/"/>
      <url>/2022/04/03/leetcode/leetcode744/</url>
      
        <content type="html"><![CDATA[<h1 id="744-寻找比目标字母大的最小字母"><a href="#744-寻找比目标字母大的最小字母" class="headerlink" title="744. 寻找比目标字母大的最小字母"></a>744. 寻找比目标字母大的最小字母</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个排序后的字符列表 letters ，列表中只包含小写英文字母。另给出一个目标字母 target，请你寻找在这一有序列表里比目标字母大的最小字母。</p><p>在比较时，字母是依序循环出现的。举个例子：</p><p>如果目标字母 target = ‘z’ 并且字符列表为 letters = [‘a’, ‘b’]，则答案返回 ‘a’</p><p>示例 1：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: letters = ["c", "f", "j"]，target = "a"</span><br><span class="line">输出: "c"</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: letters = ["c","f","j"], target = "c"</span><br><span class="line">输出: "f"</span><br></pre></td></tr></tbody></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: letters = ["c","f","j"], target = "d"</span><br><span class="line">输出: "f"</span><br></pre></td></tr></tbody></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextGreatestLetter</span>(<span class="params">self, letters: <span class="type">List</span>[<span class="built_in">str</span>], target: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> letters[bisect_right(letters, target)] <span class="keyword">if</span> target &lt; letters[-<span class="number">1</span>] <span class="keyword">else</span> letters[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 难度-简单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode420</title>
      <link href="/2022/04/02/leetcode/leetcode420/"/>
      <url>/2022/04/02/leetcode/leetcode420/</url>
      
        <content type="html"><![CDATA[<h1 id="420-强密码检验器"><a href="#420-强密码检验器" class="headerlink" title="420. 强密码检验器"></a>420. 强密码检验器</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如果一个密码满足下述所有条件，则认为这个密码是强密码：<br>由至少 6 个，至多 20 个字符组成。<br>至少包含 一个小写 字母，一个大写 字母，和 一个数字 。<br>同一字符 不能 连续出现三次 (比如 “…aaa…” 是不允许的, 但是 “…aa…a…” 如果满足其他条件也可以算是强密码)。<br>给你一个字符串 password ，返回 将 password 修改到满足强密码条件需要的最少修改步数。如果 password 已经是强密码，则返回 0 。</p><p>在一步修改操作中，你可以：</p><p>插入一个字符到 password ，<br>从 password 中删除一个字符，或<br>用另一个字符来替换 password 中的某个字符。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：password = "a"</span><br><span class="line">输出：5</span><br></pre></td></tr></tbody></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：password = "aA1"</span><br><span class="line">输出：3</span><br></pre></td></tr></tbody></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：password = "1337C0d3"</span><br><span class="line">输出：0</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>分类讨论：</p><ol><li>当密码长度位于<code>[0, 6)</code>；<ol><li><strong>“删除”</strong>操作没有任何意义，<strong>“添加”</strong>或<strong>“修改”</strong>才有意义，<strong>“修改”</strong>只需要判断字符串是否包含了小写字母、大写字母、数字即可，所以操作只需要判断 <code>max(不足6的位数，需要修改的位数)</code></li></ol></li><li>当密码长度位于<code>[6,20]</code>;<ol><li><strong>“删除”</strong>或者<strong>“添加”</strong>操作没有任何意义，所以只需要考虑<strong>“修改”</strong>即可，当连续出现的位数k大于3的时候，只需要考虑 <strong>修改</strong> k//3次即可，同时也需要考虑字符串中是否包含了大小写字母、数字，取上述两种情况的最大值即可。 </li></ol></li><li>当密码长度位于<code>(20, )</code>;<ol><li><strong>“添加”</strong>操作没有任何意义，所以只需要进行<strong>“修改”</strong>或<strong>“删除”</strong>即可，以删除为主，修改为辅。</li><li>考虑密码不限制位数的时候，只考虑替换，只需要修改 k//3(k&gt;=3)次，即可。</li><li>因为位数大于20的时候，有限考虑删除。<ol><li>当 <code>k%3==0(k&gt;3)</code>时，删除一位，可减少修改的次数，修改的次数k//3减少1，剩余连续位数，只有删除3个时，修改的次数才会减1；</li><li>当 <code>k%3==1(k&gt;3)</code>时，删除两位，可减少修改的次数，修改的次数k//3减少1，剩余连续位数，只有删除3个时，修改的次数才会减1；</li><li>当<code>k%3==2(k&gt;3)</code>时，每删除三位，可减少修改的次数一次。</li></ol></li><li>因此在删除操作时，有限考虑 <code>k%3==0</code>的时候，删除一位的操作，其次考虑所有<code>k%3==1</code>时，删除两位的操作，最后考虑删除三位的操作。</li><li>最后的操作数为删除次数的操作<code>n - 20</code> 加上<code>max(替换操作次数, 3 - 字符种类)</code>。</li></ol></li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">strongPasswordChecker</span>(<span class="params">self, password: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(password)</span><br><span class="line">        lower = upper = digit = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> password:</span><br><span class="line">            <span class="keyword">if</span> ch.islower():</span><br><span class="line">                lower = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> ch.isupper():</span><br><span class="line">                upper = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> ch.isdigit():</span><br><span class="line">                digit = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        categories = lower + upper + digit</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">6</span> - n, <span class="number">3</span> - categories)</span><br><span class="line">        <span class="keyword">elif</span> n &lt;= <span class="number">20</span>:</span><br><span class="line">            replace = cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            cur = <span class="string">'#'</span></span><br><span class="line">            <span class="keyword">for</span> ch <span class="keyword">in</span> password:</span><br><span class="line">                <span class="keyword">if</span> ch == cur:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    replace += cnt // <span class="number">3</span></span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    cur = ch</span><br><span class="line">            replace += cnt // <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(replace, <span class="number">3</span> - categories)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 记录替换次数和删除次数</span></span><br><span class="line">            replace, remove, rm2, cnt = <span class="number">0</span>, n - <span class="number">20</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            cur = <span class="string">'#'</span></span><br><span class="line">            <span class="keyword">for</span> ch <span class="keyword">in</span> password:</span><br><span class="line">                <span class="keyword">if</span> ch == cur:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> cnt &gt;= <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">if</span> cnt % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                            remove -= <span class="number">1</span></span><br><span class="line">                            replace -= <span class="number">1</span></span><br><span class="line">                        <span class="keyword">elif</span> cnt % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">                            rm2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    replace += cnt // <span class="number">3</span></span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    cur = ch</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cnt &gt;= <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> cnt % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                    remove -= <span class="number">1</span></span><br><span class="line">                    replace -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> cnt % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">                    rm2 += <span class="number">1</span></span><br><span class="line">            replace += cnt // <span class="number">3</span></span><br><span class="line"></span><br><span class="line">            use2 = <span class="built_in">min</span>(replace, rm2, remove // <span class="number">2</span>)</span><br><span class="line">            replace -= use2</span><br><span class="line">            remove -= use2 * <span class="number">2</span></span><br><span class="line">            use3 = <span class="built_in">min</span>(replace, remove // <span class="number">3</span>)</span><br><span class="line">            replace -= use3</span><br><span class="line">            remove -= use3 * <span class="number">3</span></span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">20</span> + <span class="built_in">max</span>(replace, <span class="number">3</span> - categories)</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 难度-困难 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode954</title>
      <link href="/2022/04/01/leetcode/leetcode954/"/>
      <url>/2022/04/01/leetcode/leetcode954/</url>
      
        <content type="html"><![CDATA[<h1 id="954-二倍数对数组"><a href="#954-二倍数对数组" class="headerlink" title="954. 二倍数对数组"></a>954. 二倍数对数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个长度为偶数的整数数组 <code>arr</code>，只有对 <code>arr</code> 进行重组后可以满足 “对于每个 <code>0 &lt;= i &lt; len(arr) / 2</code>，都有 <code>arr[2 * i + 1] = 2 * arr[2 * i]</code>” 时，返回 <code>true</code>；否则，返回 <code>false</code>。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [3,1,3,6]</span><br><span class="line">输出：false</span><br></pre></td></tr></tbody></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [2,1,2,6]</span><br><span class="line">输出：false</span><br></pre></td></tr></tbody></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [4,-2,2,-4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]</span><br></pre></td></tr></tbody></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用<strong>哈希表 + 排序</strong>的思路，题目明显表示，元素<code>x</code>对应的元素<code>2*x</code>数量上至少要多余元素<code>x</code>的数量，使用哈希表（字典）进行判断，当计算完毕<code>x</code>之后，更新元素<code>2*x</code>的数量，直到最后。</p><ol><li>首先计算出arr中每个元素的数量；</li><li>对于元素0，只能与0进行匹配，首先判断元素0的数量是否为偶数；</li><li>将哈希表中的元素进行绝对值排序，因为负数*2等于更小的负数，所以需要进行绝对值排序。</li><li>循环遍历哈希表，直到结束。</li></ol><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canReorderDoubled</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        cnt = Counter(arr)</span><br><span class="line">        <span class="keyword">if</span> cnt[<span class="number">0</span>] % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 下面排序方法一样</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sorted</span>(cnt, key=<span class="keyword">lambda</span> k: <span class="built_in">abs</span>(k)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sorted</span>(cnt, key=<span class="built_in">abs</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">sorted</span>(cnt, key=<span class="keyword">lambda</span> k: <span class="built_in">abs</span>(k)):</span><br><span class="line">            <span class="keyword">if</span> cnt[<span class="number">2</span> * x] &lt; cnt[x]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            cnt[<span class="number">2</span> * x] -= cnt[x]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 难度-中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指_Offer</title>
      <link href="/2022/03/31/leetcode/jian-zhi-offer/jian-zhi-offer/"/>
      <url>/2022/03/31/leetcode/jian-zhi-offer/jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer"><a href="#剑指-Offer" class="headerlink" title="剑指 Offer"></a>剑指 Offer</h1><h2 id="剑指-Offer-03"><a href="#剑指-Offer-03" class="headerlink" title="剑指 Offer 03"></a>剑指 Offer 03</h2><blockquote><p>寻找重复数字</p></blockquote><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></tbody></table></figure><p><strong>解题：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRepeatNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dic = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            dic.add(i)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="剑指-Offer-04"><a href="#剑指-Offer-04" class="headerlink" title="剑指 Offer 04"></a>剑指 Offer 04</h2><blockquote><p>二维数组中的查找</p></blockquote><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例:</strong></p><p>现有矩阵 matrix 如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line">给定 target = 5，返回 true。</span><br><span class="line"></span><br><span class="line">给定 target = 20，返回 false。</span><br></pre></td></tr></tbody></table></figure><p><strong>解题思路：</strong></p><p>方案一：使用暴力的方法，逐元素便利，寻找是否存在；</p><p>方案二：线性查找的方式，因为数组中元素每行从左到右递增以及每列从上到下递增的特点，所以考虑从左上角开始遍历，并不能很方便的进行遍历。但是从左下角开始便利，当当前元素 &gt; target 时，向上移动，当当前元素 &lt; target时，向右移动。</p><p><img src="http://r9b9hav76.hn-bkt.clouddn.com/1.png" alt="1"></p><p><img src="http://r9b9hav76.hn-bkt.clouddn.com//2.png" alt="2"></p><p><strong>题解：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findNumberIn2DArray</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(matrix[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i, j = <span class="built_in">len</span>(matrix) - <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(matrix[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] &gt; target:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[i][j] &lt; target:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure><h2 id="剑指-Offer-05"><a href="#剑指-Offer-05" class="headerlink" title="剑指 Offer 05"></a>剑指 Offer 05</h2><blockquote><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p></blockquote><p><strong>题目：</strong></p><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p> <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "We are happy."</span><br><span class="line">输出："We%20are%20happy."</span><br></pre></td></tr></tbody></table></figure><p><strong>题解</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replaceSpace</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">' '</span>:</span><br><span class="line">                res.append(<span class="string">"%20"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br></pre></td></tr></tbody></table></figure><h2 id="剑指-Offer-06"><a href="#剑指-Offer-06" class="headerlink" title="剑指 Offer 06"></a>剑指 Offer 06</h2><blockquote><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></p></blockquote><p><strong>题目</strong></p><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p> <strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></tbody></table></figure><p>解题思路：</p><p>方法一：递归方法</p><p>注意：list相加是进行末尾增加元素，而非元素相加</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reversePrint</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">return</span> self.reversePrint(head.<span class="built_in">next</span>) + [head.val] <span class="keyword">if</span> head <span class="keyword">else</span> []</span><br></pre></td></tr></tbody></table></figure><p>方法二：辅助栈的方法</p><p>注意：python中的栈是使用list直接进行操作，拥有append和pop功能。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reversePrint</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            res.append(head.val)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res[::-<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="剑指-Offer-07"><a href="#剑指-Offer-07" class="headerlink" title="剑指 Offer 07"></a>剑指 Offer 07</h2><blockquote><p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a></p></blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p><p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p> <img src="http://r9b9hav76.hn-bkt.clouddn.com//tree.jpg" alt="img"></p><p>示例 1:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: preorder = [-1], inorder = [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode728</title>
      <link href="/2022/03/31/leetcode/leetcode728/"/>
      <url>/2022/03/31/leetcode/leetcode728/</url>
      
        <content type="html"><![CDATA[<h1 id="728-自除数"><a href="#728-自除数" class="headerlink" title="728. 自除数"></a>728. 自除数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>自除数 是指可以被它包含的每一位数整除的数。</p><p>例如，128 是一个 自除数 ，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。<br>自除数 不允许包含 0 。</p><p>给定两个整数 left 和 right ，返回一个列表，列表的元素是范围 [left, right] 内所有的 自除数 。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left = 1, right = 22</span><br><span class="line">输出：[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</span><br></pre></td></tr></tbody></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left = 47, right = 85</span><br><span class="line">输出：[48,55,66,77]</span><br></pre></td></tr></tbody></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">selfDividingNumbers</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">isSelfDividing</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">            x = num</span><br><span class="line">            <span class="keyword">while</span> x:</span><br><span class="line">                x, d = <span class="built_in">divmod</span>(x, <span class="number">10</span>)</span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">0</span> <span class="keyword">or</span> num % d:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right + <span class="number">1</span>) <span class="keyword">if</span> isSelfDividing(i)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sol = Solution()</span><br><span class="line">    res = sol.selfDividingNumbers(<span class="number">47</span>, <span class="number">85</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></tbody></table></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">selfDividingNumbers</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++){</span><br><span class="line">            <span class="keyword">if</span>(isSelfDividing(i))</span><br><span class="line">                ans.add(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">isSelfDividing</span><span class="params">(<span class="type">int</span> num)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>){</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(d == <span class="number">0</span> || num % d !=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> 难度-简单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关联规则算法</title>
      <link href="/2022/03/30/machine-learning/guan-lian-gui-ze-suan-fa/"/>
      <url>/2022/03/30/machine-learning/guan-lian-gui-ze-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="关联规则算法与Apriori算法原理"><a href="#关联规则算法与Apriori算法原理" class="headerlink" title="关联规则算法与Apriori算法原理"></a>关联规则算法与Apriori算法原理</h1><h2 id="1-举例说明"><a href="#1-举例说明" class="headerlink" title="1. 举例说明"></a>1. 举例说明</h2><p>例如：购物车的数据进行关联规则挖掘，寻找关联规则；</p><p>尿布 -&gt; 啤酒[支持度=10%，置信度=70%]</p><p>支持度表示规则的有用性：表示有10%顾客的同时购买啤酒和尿布</p><p>置信度表示规则的可靠性：表示有购买尿布的顾客有70%购买啤酒</p><h2 id="2-基本概念的理解"><a href="#2-基本概念的理解" class="headerlink" title="2. 基本概念的理解"></a>2. 基本概念的理解</h2><div class="table-container"><table><thead><tr><th>TID</th><th>Items</th></tr></thead><tbody><tr><td>T1</td><td>{牛奶，面包}</td></tr><tr><td>T2</td><td>{面包，尿布，啤酒，鸡蛋}</td></tr><tr><td>T3</td><td>{面包，尿布，啤酒，可乐}</td></tr><tr><td>T4</td><td>{面包，牛奶，尿布，啤酒}</td></tr><tr><td>T5</td><td>{面包，牛奶，尿布，可乐}</td></tr></tbody></table></div><p>基本概念的理解:</p><ol><li>事务：所有情况的集合。例如：如上图所示购物篮数量的集合。</li><li>项：可以理解为研究的单个商品或者物品。例如：牛奶、面包等。</li><li>项的集合：所有项的集合。例如：{面包，啤酒，鸡蛋，牛奶，尿布，可乐}</li><li>项集：包含多个项的集合。例如：{面包，牛奶}</li><li>K-项集：包含k个项的集合。例如：2项集{面包，牛奶}，3项集等等</li><li>频繁项集：项集在事务中出现的比例大于一定的阈值。</li><li>规则：形如A=&gt;B的蕴含关系，A和B为非空不相交项集。</li><li>支持度：两个非空不相交项集在事务中同时出现的概率，support(A=&gt;B)=P(AUB)<br> 例如：A={牛奶}，B={面包}，support(A=&gt;B)=3/5=60%</li><li>置信度：两个非空不相交项集，在事务中A的情况下出现B的概率，confidience(A=&gt;B)=P(B|A)<br> 例如：A={牛奶}，B={面包}，confidience(A=&gt;B)=3/3=100%</li><li>最小支持度：专家定义的衡量支持度的阈值，表示统计意义上的最低重要性。</li><li>最小置信度：专家定义的衡量置信度的阈值，表示关联规则的最低可靠性。</li><li>强规则：同时满足最小支持度和最小置信度的规则。</li></ol><h2 id="3-关联规则挖掘步骤"><a href="#3-关联规则挖掘步骤" class="headerlink" title="3. 关联规则挖掘步骤"></a>3. 关联规则挖掘步骤</h2><ol><li>生成满足最小支持度的频繁项集；</li><li>从频繁集中，找到满足最低置信度的规则；</li><li>生成强关联规则。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 推荐算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apriori算法</title>
      <link href="/2022/03/30/machine-learning/apriori-suan-fa/"/>
      <url>/2022/03/30/machine-learning/apriori-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Apriori算法实现超市商品搭配出售方案"><a href="#Apriori算法实现超市商品搭配出售方案" class="headerlink" title="Apriori算法实现超市商品搭配出售方案"></a><strong>Apriori算法实现超市商品搭配出售方案</strong></h1><h2 id="案例内容介绍"><a href="#案例内容介绍" class="headerlink" title="案例内容介绍"></a><strong>案例内容介绍</strong></h2><p><strong>算法概述</strong></p><p>Apriori算法是一种挖掘关联规则的频繁项集算法，其核心思想是通过频繁项集==找出物品之间的关联规则==。 它的主要任务就是设法发现事物之间的内在联系。比如在常见的超市购物数据集，或者电商的网购数据集中，如果我们找到了频繁出现的数据集，那么对于超市，我们可以优化产品的位置摆放，对于电商，我们可以优化商品所在的仓库位置，达到节约成本，增加经济效益的目的。</p><p>关于这个算法有一个非常有名的故事：”尿布和啤酒”。故事是这样的：美国的妇女们经常会嘱咐她们的丈夫下班后为孩子买尿布，而丈夫在买完尿布后又要顺手买回自己爱喝的啤酒，因此啤酒和尿布在一起被购买的机会很多。这个举措使尿布和啤酒的销量双双增加，并一直为众商家所津津乐道。</p><p><strong>应用领域：</strong></p><p>该算法已经被广泛的应用到商业、网络安全，移动通信等各个领域。</p><ol><li>Apriori算法应用广泛，可用于消费市场价格分析，猜测顾客的消费习惯，比如较有名的“尿布和啤酒”的故事；</li><li>网络安全领域中的入侵检测技术；</li><li>可用在用于高校管理中，根据挖掘规则可以有效地辅助学校管理部门有针对性的开展贫困助学工作；</li><li>也可用在移动通信领域中，指导运营商的业务运营和辅助业务提供商的决策制定。</li></ol><p>关联规则算法的主要应用是购物篮分析，是为了从大量的订单中发现商品潜在的关联。其中常用的一个算法叫Apriori先验算法。</p><p><strong>实验介绍</strong></p><p>某大型连锁超市，在各个地区都有分店，在特定的时期需要做促销活动，由于每个地区消费者的行为有所差异，因此需要对每个地区的购物车数据单独分析，找出适合每个地区的商品促销套餐。购物车数据包含如下所示三个字段：用户标识，地区编号，购物车商品代码</p><p>使用<code>pyfpgrowth</code>包中的<code>find_frequent_patterns</code>来确定最低频数的组合，使用<code>generate_association_rules</code>来确定最低置信度的组合，以此来确定强相关规则，再选取最佳的前N个组合作为最终结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加需要的模块</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> pyfpgrowth <span class="keyword">as</span> fp</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">destIddict = {<span class="number">571</span>: <span class="string">'杭州'</span>, <span class="number">574</span>: <span class="string">'宁波'</span>, <span class="number">577</span>: <span class="string">'温州'</span>, <span class="number">573</span>: <span class="string">'嘉兴'</span>,</span><br><span class="line">              <span class="number">572</span>: <span class="string">'湖州'</span>, <span class="number">575</span>: <span class="string">'绍兴'</span>, <span class="number">579</span>: <span class="string">'金华'</span>, <span class="number">570</span>: <span class="string">'衢州'</span>,</span><br><span class="line">              <span class="number">580</span>: <span class="string">'舟山'</span>, <span class="number">576</span>: <span class="string">'台州'</span>, <span class="number">578</span>: <span class="string">'丽水'</span>}</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"*"</span> * <span class="number">10</span> + <span class="string">"以下输出了其中三个地区的商品套餐列表"</span> + <span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i, destid <span class="keyword">in</span> <span class="built_in">enumerate</span>(destIddict.items()):</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s地区的商品套餐列表'</span> % destid[<span class="number">1</span>])</span><br><span class="line">    dest_data = initData(destid[<span class="number">0</span>])</span><br><span class="line">    result1 = fp.find_frequent_patterns(dest_data, support_threshold=<span class="number">100</span>)  <span class="comment"># 最低频数为100</span></span><br><span class="line">    rules = fp.generate_association_rules(result1, confidence_threshold=<span class="number">0.35</span>)  <span class="comment"># 最低置信度为0.35</span></span><br><span class="line">    sortRules = <span class="built_in">sorted</span>(rules.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"包含%d类套餐方案"</span> % <span class="built_in">len</span>(getlenRuleKinds(sortRules)))</span><br><span class="line">    kindkeys = getlenRuleKinds(sortRules).keys()</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> kindkey <span class="keyword">in</span> kindkeys:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"************第%d类套餐,包含%d个套餐组合的频繁套餐规则：*****************"</span> % (kindkey - <span class="number">1</span>, kindkey))</span><br><span class="line">        rulesval = getlenRules(sortRules, kindkey)</span><br><span class="line">        cardNameDict = Id2CardName(rulesval)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"规则总数%d个,其中排名前10的规则是："</span> % <span class="built_in">len</span>(cardNameDict))</span><br><span class="line">        <span class="keyword">for</span> j, items <span class="keyword">in</span> <span class="built_in">enumerate</span>(cardNameDict.items()):</span><br><span class="line">            <span class="keyword">if</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">                <span class="built_in">print</span>(items)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"***************************************"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 推荐算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/2022/03/30/docker/"/>
      <url>/2022/03/30/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">192.168.137.21</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前系统版本号</span></span><br><span class="line">uname</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前系统版本的详细信息</span></span><br><span class="line">cat /etc/os-release</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo # 国外地址</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 国内源</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 yum 软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 安装Docker镜像相关的引擎  docker-ce是社区版 ee是企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. 启动 Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6. 查看当前docker的安装情况</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7. hello-world</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8. 查看Docker镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9. 了解卸载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载 Docker Engine, CLI, and Containerd packages:（卸载依赖）</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有的images, containers, and volumes（删除资源）</span></span><br><span class="line">rm -rf /var/lib/docker # docker的默认工作路径</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></tbody></table></figure><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">针对Docker客户端版本大于 1.10.0 的用户</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://xrqxoe3h.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><strong>1. Docker是怎么工作的</strong></p><p>Docker是一个Client-Service结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问！</p><p>Docker-Service接收到Docker-Client的指令，就会执行这个命令。</p><p><strong>2. Docker为什么比VM快</strong></p><ul><li>Docker有着比虚拟机更少的抽象层；</li><li>Docker利用的是宿主机的内核，vm需要的是Guest OS；</li></ul><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version # 显示docker的显示信息</span><br><span class="line">docker info# 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker &lt;comment&gt; --help# 帮助命令</span><br></pre></td></tr></tbody></table></figure><p>官方文档 <a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p><strong>docker images</strong> 查看所有本地的主机镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY镜像的仓库源</span><br><span class="line">TAG镜像的标签</span><br><span class="line">IMAGE ID镜像的ID</span><br><span class="line">CREATED镜像的创建时间</span><br><span class="line">SIZE镜像的大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             # 列出所有的镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像ID</span><br></pre></td></tr></tbody></table></figure><p><strong>docker search</strong> 搜索镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11158     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4235      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   830                  [OK]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项，通过搜索来过滤</span></span><br><span class="line">--filter=STARS=3000# 搜索出来的是STARS &gt; 3000 的</span><br></pre></td></tr></tbody></table></figure><p><strong>docker pull</strong> 下载镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@localhost ~]# docker pull mysql</span><br><span class="line">Using default tag: latest# 如果不写tag， 默认就是最新版</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">33847f680f63: Pull complete # 分层下载，docker image的核心，联和文件系统</span><br><span class="line">5cb67864e624: Pull complete </span><br><span class="line">1a2b594783f5: Pull complete </span><br><span class="line">b30e406dd925: Pull complete </span><br><span class="line">48901e306e4c: Pull complete </span><br><span class="line">603d2b7147fd: Pull complete </span><br><span class="line">802aa684c1c4: Pull complete </span><br><span class="line">715d3c143a06: Pull complete </span><br><span class="line">6978e1b7a511: Pull complete </span><br><span class="line">f0d78b0ac1be: Pull complete </span><br><span class="line">35a94d251ed1: Pull complete </span><br><span class="line">36f75719b1a9: Pull complete </span><br><span class="line">Digest: sha256:8b928a5117cf5c2238c7a09cd28c2e801ac98f91c3f8203a8938ae51f14700fd# 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest# 真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等价于它</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line">[root@localhost ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">33847f680f63: Already exists </span><br><span class="line">5cb67864e624: Already exists </span><br><span class="line">1a2b594783f5: Already exists </span><br><span class="line">b30e406dd925: Already exists </span><br><span class="line">48901e306e4c: Already exists </span><br><span class="line">603d2b7147fd: Already exists </span><br><span class="line">802aa684c1c4: Already exists </span><br><span class="line">5b5a19178915: Pull complete </span><br><span class="line">f9ce7411c6e4: Pull complete </span><br><span class="line">f51f6977d9b2: Pull complete </span><br><span class="line">aeb6b16ce012: Pull complete </span><br><span class="line">Digest: sha256:be70d18aedc37927293e7947c8de41ae6490ecd4c79df1db40d1b5b5af7d9596</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></tbody></table></figure><p><strong>docker rmi</strong> 删除镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f &lt;IMAGE ID&gt;# 删除单个镜像</span><br><span class="line">docker rmi -f &lt;IMAGE ID&gt; &lt;IMAGE ID&gt; &lt;IMAGE ID&gt; # 删除多个镜像</span><br><span class="line">docker rmi -f $(docker images -aq)# 递归迭代删除所有镜像</span><br></pre></td></tr></tbody></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>说明：有了镜像才可以创建容器，使用linux下载一个centos镜像来测试学习</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></tbody></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name="Name"容器名字Tomcat01 Tomcat02，用来区分容器</span><br><span class="line">-d后台方式运行</span><br><span class="line">-it使用交互方式运行，进入容器查看内容</span><br><span class="line">-p指定容器的端口-p8080:8080</span><br><span class="line">-p ip:主机端口：容器端口</span><br><span class="line">-p 主机端口：容器端口（常用）</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P随机指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 （使用bash启动并进入容器）</span></span><br><span class="line">[root@localhost ~]# docker run -it centos /bin/bash </span><br><span class="line">[root@ffd1542c82f2 /]# ls# 查看容器内的centos，其中很多命令不完善</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@ffd1542c82f2 /]# exit# 退出容器</span><br></pre></td></tr></tbody></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps 命令</span></span><br><span class="line"># 没有后续可选项，则表示列出当前正在运行的容器</span><br><span class="line">  -a            # 列出当前正在运行的容器+带出历史运行过得容器</span><br><span class="line">  -n=?# 显示最近创建的n个容器</span><br><span class="line">  -q# 只显示容器的编号</span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">ffd1542c82f2   centos         "/bin/bash"   4 minutes ago   Exited (0) 2 minutes ago             nice_fermat</span><br><span class="line">664379ddd5bf   d1165f221234   "/hello"      2 hours ago     Exited (0) 2 hours ago               elastic_bartik</span><br></pre></td></tr></tbody></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit# 直接容器停止并退出</span><br><span class="line">Ctrl + P + Q # 容器不停止退出</span><br></pre></td></tr></tbody></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定容器(-f 表示强制删除，正在运行中的只能通过强制删除来执行)</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm# 删除所有容器</span><br></pre></td></tr></tbody></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id</span><br><span class="line">docker restart 容器id</span><br><span class="line">docker stop 容器id# 停止</span><br><span class="line">docker kill 容器id# 强制停止</span><br></pre></td></tr></tbody></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><p>后台启动容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker run -d 镜像名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">问题 docker ps, 发现centos停止了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见的坑，docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx，容器启动后，发现自己没有提供容器，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></tbody></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail &lt;number&gt; 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自己编写一段shell脚本</span></span><br><span class="line">[root@localhost /]# docker run -d centos /bin/sh -c "while true;do echo Hello word;sleep 1;done"</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE</span><br><span class="line">dbac5d3e0b02   centos</span><br><span class="line">8c7f10bda482   centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line">-tf# 显示日志</span><br><span class="line">--tail number #显示日志条数</span><br></pre></td></tr></tbody></table></figure><p><strong>查看容器中的进程信息 ps</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker top 容器id</span><br><span class="line">[root@localhost /]# docker top dbac5d3e0b02</span><br><span class="line">UID(当前的用户ID)    PID(父ID)           PPID(进程ID)        C                   STIME               TTY  </span><br><span class="line">root                12525               12507               0                   15:46               ?   </span><br><span class="line">root                12781               12525               0                   15:50               ?    </span><br></pre></td></tr></tbody></table></figure><p><strong>查看镜像的源数据</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Id": "dbac5d3e0b020deb2b0c10bc8c4dc43a75ed28be69e8fef7f80baf2555433ae2",</span><br><span class="line">        "Created": "2021-07-24T07:46:41.190366997Z",</span><br><span class="line">        "Path": "/bin/sh",</span><br><span class="line">        "Args": [</span><br><span class="line">            "-c",</span><br><span class="line">            "while true;do echo Hello word;sleep 1;done"</span><br><span class="line">        ],</span><br><span class="line">        "State": {</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 12525,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2021-07-24T07:46:41.437400782Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        },</span><br><span class="line">        "Image": "sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/dbac5d3e0b020deb2b0c10bc8c4dc43a75ed28be69e8fef7f80baf2555433ae2/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/dbac5d3e0b020deb2b0c10bc8c4dc43a75ed28be69e8fef7f80baf2555433ae2/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/dbac5d3e0b020deb2b0c10bc8c4dc43a75ed28be69e8fef7f80baf2555433ae2/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/dbac5d3e0b020deb2b0c10bc8c4dc43a75ed28be69e8fef7f80baf2555433ae2/dbac5d3e0b020deb2b0c10bc8c4dc43a75ed28be69e8fef7f80baf2555433ae2-json.log",</span><br><span class="line">        "Name": "/peaceful_bassi",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": {</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": {</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": {}</span><br><span class="line">            },</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": {},</span><br><span class="line">            "RestartPolicy": {</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            },</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "CgroupnsMode": "host",</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        "GraphDriver": {</span><br><span class="line">            "Data": {</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/d3bd1b8d57396b90cff4c17e12bece3e34754ed9bb57c58c7313b76f497a7e32-init/diff:/var/lib/docker/overlay2/caf2bb1d0c18a4a795b952cdfb87a2782faef45e4666c0acf08e9bef985a3807/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/d3bd1b8d57396b90cff4c17e12bece3e34754ed9bb57c58c7313b76f497a7e32/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/d3bd1b8d57396b90cff4c17e12bece3e34754ed9bb57c58c7313b76f497a7e32/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/d3bd1b8d57396b90cff4c17e12bece3e34754ed9bb57c58c7313b76f497a7e32/work"</span><br><span class="line">            },</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        },</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": {</span><br><span class="line">            "Hostname": "dbac5d3e0b02",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "while true;do echo Hello word;sleep 1;done"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": {</span><br><span class="line">                "org.label-schema.build-date": "20201204",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS"</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "NetworkSettings": {</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "b7172ccad7ead2be7fbc21570310e75a704efca6e9ea96b4c8403e0f780dd953",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": {},</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/b7172ccad7ea",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "cbdc0fbaf967498b9998bc00218256fbc5e2392884cf86e76ef26926821d1b00",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.3",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">            "Networks": {</span><br><span class="line">                "bridge": {</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "d7f11f7ce17c96a9b447952eb7cb5738ea9065bc59b508086dc834980998cec5",</span><br><span class="line">                    "EndpointID": "cbdc0fbaf967498b9998bc00218256fbc5e2392884cf86e76ef26926821d1b00",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.3",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p><strong>进入当前正在运行的命令</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一：命令</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@localhost /]# docker exec -it dbac5d3e0b02 /bin/bash</span><br><span class="line">[root@dbac5d3e0b02 /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 07:46 ?        00:00:00 /bin/sh -c while true;do echo Hello word;sleep 1;done</span><br><span class="line">root       774     0  0 07:59 pts/0    00:00:00 /bin/bash</span><br><span class="line">root       796   774  0 07:59 pts/0    00:00:00 ps -ef</span><br><span class="line">root       797     1  0 07:59 ?        00:00:00 /bin/sh -c while true;do echo Hello word;sleep 1;done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二：命令</span></span><br><span class="line">docker attach 容器id</span><br><span class="line">[root@localhost /]# docker attach dbac5d3e0b02</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span><span class="comment"># 进入容器后开启一个新的终端，可以在里面进行操作（常用）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach<span class="comment"># 进入容器当前正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的的主机路径</span><br><span class="line">[root@localhost ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@5ef4c579aec7 /]# cd /home</span><br><span class="line">[root@localhost home]# docker attach 5ef4c579aec7</span><br><span class="line">[root@5ef4c579aec7 /]# cd /home</span><br><span class="line">[root@5ef4c579aec7 home]# touch test.java</span><br><span class="line">[root@5ef4c579aec7 home]# eixt</span><br><span class="line">bash: eixt: command not found</span><br><span class="line">[root@5ef4c579aec7 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost home]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                       PORTS     NAMES</span><br><span class="line">5ef4c579aec7   centos    "/bin/bash"   3 minutes ago   Exited (127) 7 seconds ago             elastic_margulis</span><br><span class="line">[root@localhost home]# docker cp 5ef4c579aec7:/home/test.java /home/</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">gxl01  test.java</span><br></pre></td></tr></tbody></table></figure><h3 id="命令小结"><a href="#命令小结" class="headerlink" title="命令小结"></a>命令小结</h3><p>自己总结一下，列出来，方便查询</p><h3 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h3><blockquote><p>作业一：Docker 安装 Nginx</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 搜索镜像 search建议去dockerHub搜索，可以看帮助文档</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 下载镜像 pull</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 运行测试</span></span><br><span class="line">[root@localhost home]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    08b152afcfae   46 hours ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   7 months ago   209MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3344是nginx01容器中80端口在本地服务器上的映射</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 后台运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name 给容器起名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 暴露端口，宿主机端口:容器内端口(端口暴露指代宿主机的防火墙将3344暴露出来，映射到nginx01容器的80端口)</span></span><br><span class="line">[root@localhost home]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">00d23b93cb9b42c329ebb95f6e0b1d76bb056f84f7170ffc0e21ce24b455a66c</span><br><span class="line">[root@localhost home]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    08b152afcfae   46 hours ago   133MB</span><br><span class="line">centos       latest    300e315adb2f   7 months ago   209MB</span><br><span class="line">[root@localhost home]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">00d23b93cb9b   nginx     "/docker-entrypoint.…"   22 seconds ago   Up 21 seconds   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证端口是否可以访问</span></span><br><span class="line">[root@localhost home]# curl localhost:3344</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后尝试在浏览器通过 ip:端口的方式访问</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 进入容器</span></span><br><span class="line">[root@localhost home]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@00d23b93cb9b:/# cd /etc/nginx/</span><br><span class="line">root@00d23b93cb9b:/etc/nginx# ls</span><br><span class="line">conf.d          mime.types  nginx.conf   uwsgi_params</span><br><span class="line">fastcgi_params  modules     scgi_params</span><br><span class="line">root@00d23b93cb9b:/etc/nginx# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br></pre></td></tr></tbody></table></figure><blockquote><p>作业二：Docker 部署 tomact</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之前的使用都是后台运行，停止容器后仍然可以查到，run -it --<span class="built_in">rm</span>，一般用来测试，执行完上述命令即删</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常规方法：下载后启动并运行</span></span><br><span class="line">docker pull tomcat</span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试访问是否有问题</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现404错误</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@localhost home]# docker exec -it tomcat01 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现问题：1. linux命令少了，没有ll命令，可以使用<span class="built_in">ls</span> -al代替； 2. 没有webapps。原因在于阿里云镜像知识最小的镜像，所有不必要的全部剔除，保证最小可运行的环境。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将webapps放到特定目录</span></span><br><span class="line">root@91bcb7139ea8:/usr/local/tomcat# cp webapps.dist/* webapps</span><br><span class="line">cp: -r not specified; omitting directory 'webapps.dist/ROOT'</span><br><span class="line">cp: -r not specified; omitting directory 'webapps.dist/docs'</span><br><span class="line">cp: -r not specified; omitting directory 'webapps.dist/examples'</span><br><span class="line">cp: -r not specified; omitting directory 'webapps.dist/host-manager'</span><br><span class="line">cp: -r not specified; omitting directory 'webapps.dist/manager'</span><br><span class="line">root@91bcb7139ea8:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@91bcb7139ea8:/usr/local/tomcat# cd webapps</span><br><span class="line">root@91bcb7139ea8:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次测试，发现无错误</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>作业三：部署ES + KIBANA</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ES 暴露的端口较多</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ES 十分消耗内存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ES 的数据一般需要放置在安全目录！进行挂载</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 elasticsearch</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于这个是非常卡的，可以使用docker stats查看当前cpu状态</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为太占资源，终止，所以考虑增加内存限制，修改配置文件 -e 环境配置修改</span></span><br><span class="line">docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2</span><br></pre></td></tr></tbody></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li><p>portainer（先用这个学习理论）</p><p>什么是portainer，一个图形化管理工具。</p><p>下载启动运行</p></li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></tbody></table></figure><p>​                使用外网进行测试：8088端口</p><ul><li>Rancher（CI/CD学习时使用）</li></ul><h2 id="Docker-镜像讲解"><a href="#Docker-镜像讲解" class="headerlink" title="Docker 镜像讲解"></a>Docker 镜像讲解</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需要的所有内容，包括代码、运行时、库、环境变量和配置文件。所有应用直接打包成docker镜像，可以直接运行！</p><p>如何得到镜像：</p><ul><li>从远程仓库下载</li><li>朋友拷贝</li><li>自己制作一个镜像</li></ul><h3 id="Docker-镜像加载原理"><a href="#Docker-镜像加载原理" class="headerlink" title="Docker 镜像加载原理"></a>Docker 镜像加载原理</h3><blockquote><p>UnionFS （联和文件系统）</p></blockquote><p>类似 git，支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。镜像可以通过继承，制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联和加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker 镜像加载原理</p></blockquote><p>bootfs(boot file system) 主要包含bootloader和kernel, bootloader主要是引导加载kernel。Docker镜像的最底层是bootfs。当boot加载完成之后整个内核就在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs(root file system), 在bootfs之上。包含的就是典型Linux系统中的/dev, /proc, /bin, /etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p>为什么Docker容器很小？</p><p>因为对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令、工具和程序库就可以，底层直接使用Host的kernel，自己只需要提供rootfs就可以了，对于不同的linux发行版，bootfs基本一致，rootfs会有差别，因此可以公用bootfs。</p><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><blockquote><p>分层的镜像</p></blockquote><p>在下载镜像时，可以注意到下载的日志是一层一层的在下载。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">33847f680f63: Already exists </span><br><span class="line">26a746039521: Pull complete </span><br><span class="line">18d87da94363: Pull complete </span><br><span class="line">5e118a708802: Pull complete </span><br><span class="line">ecf0dbe7c357: Pull complete </span><br><span class="line">46f280ba52da: Pull complete </span><br><span class="line">Digest: sha256:cd0c68c5479f2db4b9e2c5fbfdb7a8acb77625322dd5b474578515422d3ddb59</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看redis镜像的具体信息</span></span><br><span class="line">[root@localhost home]# docker image inspect redis:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">layer表示当前镜像包含的层，类似git，按顺序下载，下一层下载完毕实现对上一层的一个更新，整体下载完毕后，会生成一个层，即一个镜像</span></span><br><span class="line">"RootFS": {</span><br><span class="line">    "Type": "layers",</span><br><span class="line">    "Layers": [</span><br><span class="line">        "sha256:814bff7343242acfd20a2c841e041dd57c50f0cf844d4abd2329f78b992197f4",</span><br><span class="line">        "sha256:dd1ebb1f5319785e34838c7332a71e5255bda9ccf61d2a0bf3bff3d2c3f4cdb4",</span><br><span class="line">        "sha256:11f99184504048b93dc2bdabf1999d6bc7d9d9ded54d15a5f09e36d8c571c32d",</span><br><span class="line">        "sha256:e461360755916af80821289b1cbc503692cf63e4e93f09b35784d9f7a819f7f2",</span><br><span class="line">        "sha256:45f6df6342536d948b07e9df6ad231bf17a73e5861a84fc3c9ee8a59f73d0f9f",</span><br><span class="line">        "sha256:262de04acb7e0165281132c876c0636c358963aa3e0b99e7fbeb8aba08c06935"</span><br><span class="line">    ]</span><br><span class="line">},</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>特点</p></blockquote><p>Docker 镜像都是只读的，当容器启动时，一个新的可写被加载到镜像的顶部！这一层就是我们所说的容器层，容器之下都叫镜像层！</p><h3 id="commot-镜像"><a href="#commot-镜像" class="headerlink" title="commot 镜像"></a>commot 镜像</h3><p>如何提交一个自己的镜像</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令和git原理类似</span></span><br><span class="line">docker commit -m=<span class="string">"提交的描述信息"</span> -a=<span class="string">"作者"</span> 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></tbody></table></figure><p>实践</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个tomcat</span></span><br><span class="line">[root@localhost home]# docker run -it -p 8080:8080 tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将加入webapps之后的tomcat版本提交</span></span><br><span class="line">[root@localhost ~]# docker commit -a="gxl" -m="add webapps app" 87fa7eb87411 tomcat2.0:1.0 </span><br><span class="line">sha256:ab87991fac1bfec5c13b202c35aff374943fd9df03309bb8c5ba79aa15224ab0</span><br><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat2.0             1.0       ab87991fac1b   7 seconds ago   673MB</span><br></pre></td></tr></tbody></table></figure><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p>容器之间可以有一个数据共享技术！Docker容器中产生的数据，同步到本地！这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p>总结：容器的持久化和同步操作！容器之间也是可以进行数据共享的！</p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@localhost ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker inspect 容器<span class="built_in">id</span>，查看容器信息</span></span><br><span class="line">[root@localhost ceshi]# docker inspect 891847f6e5f7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器的挂载信息，挂载 -v 卷</span></span><br><span class="line">"Mounts": [</span><br><span class="line">    {</span><br><span class="line">        "Type": "bind",</span><br><span class="line">        "Source": "/home/ceshi", # 映射的主机目录</span><br><span class="line">        "Destination": "/home",# 容器中的目录</span><br><span class="line">        "Mode": "",</span><br><span class="line">        "RW": true,</span><br><span class="line">        "Propagation": "rprivate"</span><br><span class="line">    }</span><br><span class="line">],</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">双向绑定，一边发生变化，另一边也会发生变化</span></span><br></pre></td></tr></tbody></table></figure><p>常用方式：在修改某些服务器配置文件时，考虑使用挂载的方式进行，每次修改配置只需要在主机上进行修改即可。</p><h3 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h3><p>思考：MySQL的数据持久化问题</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动镜像</span></span><br><span class="line">[root@localhost ~]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动成功之后，我们在本地使用mysql进行连接测试--可以成功</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化可以理解为将mysql数据持久化保存在本地服务器，之后mysql服务器容器进行删除，也不会影响本地的数据卷</span></span><br></pre></td></tr></tbody></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载</span></span><br><span class="line">-v 容器内路径！</span><br><span class="line">docker run -d -P --name nginx02 -v /etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有的 volume 的情况</span></span><br><span class="line">[root@localhost ~]# docker volume ls</span><br><span class="line">local     5e55284fa50435535c15afa40651def91db502fa99a16aefa5fc4f92d654b07d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里发现，这种就是匿名挂载，我们在 -v 只写了容器内的路径，没有写容器外的路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载</span></span><br><span class="line">docker run -d -P --name nginx03 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">[root@localhost ~]# docker volume ls</span><br><span class="line">local     juming-nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 卷名:容器内路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看一下这个卷</span></span><br><span class="line">[root@localhost ~]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "CreatedAt": "2021-07-25T13:16:04+08:00",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": null,</span><br><span class="line">        # 表示挂载地址</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data",</span><br><span class="line">        "Name": "juming-nginx",</span><br><span class="line">        "Options": null,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>所有Docker容器内的卷，在没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxx/_data</code>中</p><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况下使用的是<code>具名挂载</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载、匿名挂载、指定路径挂载</span></span><br><span class="line">-v 容器内路径 # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径  # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径# 指定路径挂载</span><br></pre></td></tr></tbody></table></figure><p>扩展：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径, ro/rw 改变读写权限</span></span><br><span class="line">roreadonly# 只读</span><br><span class="line">rwreadwrite# 可读可写（不写，默认为rw）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一旦设置了容器权限，容器对我们挂载出来的内容就有了限定!</span></span><br><span class="line">docker run -d -P --name nginx04 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx04 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作的!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h3><p>DockerFile就是用来构建 docker镜像的构建文件!可以通过写dockerfile命令脚本来实现。</p><blockquote><p>方式二</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个dockerfile文件，名字可以随机，建议使用dockerfile开头</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件中的内容指令（大写）参数</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUM ["volume01", "volume02"]</span><br><span class="line"></span><br><span class="line">CMD echo "---end---"</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里每个命令就是镜像的一层</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行上述命令，打包成一个新的镜像并提交 -t生成的镜像名</span></span><br><span class="line">[root@localhost docker-test-volume]# docker build -f /home/docker-test-volume/dockerfile1 -t localhost/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里每个命令就是镜像的一层</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. centos的重定向</span></span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 对生成的镜像，在创建的时候进行挂载</span></span><br><span class="line">Step 2/4 : VOLUME ["volume01", "volume02"]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> b393dbf42fac</span></span><br><span class="line">Removing intermediate container b393dbf42fac</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">2e2ad7cc9364</span></span><br><span class="line">Step 3/4 : CMD echo "---end---"</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 4060d9812574</span></span><br><span class="line">Removing intermediate container 4060d9812574</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">62605877f237</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> ac2df04559e3</span></span><br><span class="line">Removing intermediate container ac2df04559e3</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5206574493a5</span></span><br><span class="line">Successfully built 5206574493a5</span><br><span class="line">Successfully tagged localhost/centos:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动自己的镜像 5206574493a5-镜像<span class="built_in">id</span></span></span><br><span class="line">[root@localhost docker-test-volume]# docker run -it 5206574493a5 /bin/bash</span><br><span class="line">[root@9dee0e99a55e /]# ls -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.  20 root root 262 Dec  4  2020 var</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面两个就是在生成镜像的时候自动挂载的数据卷目录</span></span><br><span class="line">drwxr-xr-x.   2 root root   6 Jul 25 08:40 volume01</span><br><span class="line">drwxr-xr-x.   2 root root   6 Jul 25 08:40 volume02</span><br></pre></td></tr></tbody></table></figure><p>这个volume01、volume02在外部一定有一个同步的目录！</p><p><code>VOLUME ["volume01", "volume02"]</code></p><p>查一下卷挂载的路径</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-test-volume]# docker inspect 9dee0e99a55e</span><br><span class="line">"Mounts": [</span><br><span class="line">    {</span><br><span class="line">        "Type": "volume",</span><br><span class="line">        "Name": "a44a3a2ab2cac02a9496a0d2ba95c642f8db6fb633e1a6e92085dcac97f9ddc9",</span><br><span class="line">        "Source": "/var/lib/docker/volumes/a44a3a2ab2cac02a9496a0d2ba95c642f8db6fb633e1a6e92085dcac97f9ddc9/_data",</span><br><span class="line">        "Destination": "volume01",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Mode": "",</span><br><span class="line">        "RW": true,</span><br><span class="line">        "Propagation": ""</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        "Type": "volume",</span><br><span class="line">        "Name": "ac746ec0b43315a475c7c1f5330ad5026db538fafba638a09c854ba5fc16c61b",</span><br><span class="line">        "Source": "/var/lib/docker/volumes/ac746ec0b43315a475c7c1f5330ad5026db538fafba638a09c854ba5fc16c61b/_data",</span><br><span class="line">        "Destination": "volume02",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Mode": "",</span><br><span class="line">        "RW": true,</span><br><span class="line">        "Propagation": ""</span><br><span class="line">    }</span><br><span class="line">],</span><br></pre></td></tr></tbody></table></figure><p>假设镜像没有挂载卷，要手动进行镜像挂载 -v 卷名:容器内路径！</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">操作：将docker02挂载到docker01实现数据的同步，将docker03挂载到docker02，实现两者之间的数据同步，本地中也存在挂载卷，docker01、docker02、docker03在本地挂载的位置是一致的，可以使用docker inspect查看</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run -it --name docker名 --volumes-from 挂载容器<span class="built_in">id</span> 镜像<span class="built_in">id</span>或者镜像名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立docker01容器</span></span><br><span class="line">[root@localhost /]# docker run -it --name docker01 localhost/centos:1.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker02容器继承docker01，实现挂载同步</span></span><br><span class="line">[root@localhost /]# docker run -it --name docker02 --volumes-from docker01 localhost/centos:1.0</span><br><span class="line">[root@localhost /]# docker run -it --name docker03 --volumes-from docker02 localhost/centos:1.0</span><br></pre></td></tr></tbody></table></figure><p>多个mysql实现数据共享</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span><br></pre></td></tr></tbody></table></figure><p><strong>结论</strong></p><p>容器之间配置信息的传递，数据卷容器的生命周期一致持续到没有容器使用为止。但是一旦持续化到本地，这个时候，本地的数据是不会删除的！</p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h3><p>dockerfile使用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建成一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像（DockerHub、阿里云镜像仓库！）</li></ol><p>查看一下官方文档</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">点击具体版本进入github，可以看到dockerfile脚本</span></span><br><span class="line">FROM scratch # 一个最基本的镜像</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /  # 添加一个centos7的功能</span><br><span class="line"></span><br><span class="line">LABEL \  # 添加一些centos7的一些基本标签label</span><br><span class="line">    org.label-schema.schema-version="1.0" \</span><br><span class="line">    org.label-schema.name="CentOS Base Image" \</span><br><span class="line">    org.label-schema.vendor="CentOS" \</span><br><span class="line">    org.label-schema.license="GPLv2" \</span><br><span class="line">    org.label-schema.build-date="20201113" \</span><br><span class="line">    org.opencontainers.image.title="CentOS Base Image" \</span><br><span class="line">    org.opencontainers.image.vendor="CentOS" \</span><br><span class="line">    org.opencontainers.image.licenses="GPL-2.0-only" \</span><br><span class="line">    org.opencontainers.image.created="2020-11-13 00:00:00+00:00"</span><br><span class="line"></span><br><span class="line">CMD ["/bin/bash"]</span><br></pre></td></tr></tbody></table></figure><p>很多官方镜像都是基础包，很多功能都没有，我们通常会搭建自己的镜像！</p><h3 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h3><p><strong>基础知识</strong></p><ol><li>每个保留关键字（指令）都是必须是大写字母</li><li>执行从上到下顺序执行</li><li><code>#</code>表示注释</li><li>每个指令都会创建提交一个新的镜像层，并提交</li></ol><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F1869289%2F202005%2F1869289-20200529090814461-1122968296.png&amp;refer=http%3A%2F%2Fimg2020.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1629797850&amp;t=6933ac1fe6a1c4ddd055e9dcc30e0edf" alt="img"></p><p>DcokerFile镜像逐渐成为企业交付的标准，必须掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品</p><p>Docker容器：容器就是镜像运行起来提供的服务器</p><h3 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM # 基础镜像，一切从这里开始</span><br><span class="line">MAINTAINER# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD# 步骤，tomcat镜像，这个tomcat压缩包！添加内容</span><br><span class="line">WORKDIR# 镜像的工作目录</span><br><span class="line">VOLUME# 挂载的目录</span><br><span class="line">EXPOSE# 暴露端口配置</span><br><span class="line">CMD# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可以被替代</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD# 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令</span><br><span class="line">COPY # 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV# 构建的时候设置环境变量！</span><br></pre></td></tr></tbody></table></figure><h3 id="实战测试-创建自己的Centos镜像"><a href="#实战测试-创建自己的Centos镜像" class="headerlink" title="实战测试-创建自己的Centos镜像"></a>实战测试-创建自己的Centos镜像</h3><p>Docker Hub 中 99% 镜像都是从这个基础镜像过来的 FROM <code>scratch</code>，然后配置需要的软件和配置来进行的构建</p><blockquote><p>创建自己的centos</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 编写Dockerfile的文件</span></span><br><span class="line">[root@localhost home]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER GUOXL&lt;xinleguo@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local# 设置工作路径</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "---end---"</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 通过这个文件构建镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker build -f dockerfile文件路径 -t 镜像名:[tag]</span></span><br><span class="line"></span><br><span class="line">Successfully built 88bb91d56aa2</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 测试运行</span></span><br></pre></td></tr></tbody></table></figure><p>增加之后的镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# docker run -it mycentos:0.1</span><br><span class="line">[root@6ce26b5f132e local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@6ce26b5f132e local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.6  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:06  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>本地docker镜像的变更地址</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]# docker history 88bb91d56aa2 # 镜像id</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">88bb91d56aa2   7 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        </span><br><span class="line">d7ed51f66b99   7 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span><br><span class="line">14d64a6ce413   7 minutes ago   /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span><br><span class="line">df620171bab5   7 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        </span><br><span class="line">a51b3b997e53   7 minutes ago   /bin/sh -c yum -y install net-tools             27.7MB    </span><br><span class="line">bd64cf31f5a3   7 minutes ago   /bin/sh -c yum -y install vim                   65.2MB    </span><br><span class="line">dda1db55e5ed   8 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B        </span><br><span class="line">b0c738f47d37   8 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        </span><br><span class="line">1389604442d6   8 minutes ago   /bin/sh -c #(nop)  MAINTAINER GUOXL&lt;xinleguo…   0B        </span><br><span class="line">300e315adb2f   7 months ago    /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B        </span><br><span class="line">&lt;missing&gt;      7 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      7 months ago    /bin/sh -c #(nop) ADD file:bd7a2aed6ede423b7…   209MB     </span><br><span class="line">[root@localhost home]# </span><br></pre></td></tr></tbody></table></figure><p>使用<code>history</code>可以查看一些官方镜像的变更历史，了解官方镜像是怎么做的</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可以被替代</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></tbody></table></figure><p>测试 <code>cmd</code> 命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写 dockerfile文件</span></span><br><span class="line">[root@localhost dockerfile]# cat dockerfile-cmd-test </span><br><span class="line">FROM centos</span><br><span class="line">CMD ["ls", "-a"]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line">Successfully built 2462b18a2cd8</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run运行，发现我们的<span class="built_in">ls</span> -a命令生效</span></span><br><span class="line">[root@localhost dockerfile]# docker run 2462b18a2cd8</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想追加一个命令 -l， <span class="built_in">ls</span> -al</span></span><br><span class="line">[root@localhost dockerfile]# docker run 2462b18a2cd8 -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: "-l": executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">失败原因在于 cmd 的清理下， <span class="string">'-l'</span> 替换了 <span class="string">'CMD ["ls", "-a"]'</span> 命令， -l不是命令所以报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 <span class="built_in">ls</span> -al 可以执行</span></span><br><span class="line">[root@localhost dockerfile]#  docker run 2462b18a2cd8 ls -al</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Jul 25 15:24 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Jul 25 15:24 ..</span><br><span class="line">-rwxr-xr-x.   1 root root   0 Jul 25 15:24 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 340 Jul 25 15:24 dev</span><br></pre></td></tr></tbody></table></figure><p>测试 <code>ENTRYPOINT</code> 命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dockerfile]# vi dockerfile-cmd-entrypoint</span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT ["ls", "-a"]</span><br><span class="line"></span><br><span class="line">[root@localhost dockerfile]# docker build -f dockerfile-cmd-entrypoint -t entorypoint-test .</span><br><span class="line">Successfully built 94635b3392fc</span><br><span class="line">Successfully tagged entorypoint-test:latest</span><br><span class="line">[root@localhost dockerfile]# docker run 94635b3392fc</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们的追加命令，是直接拼接在我们的 ENTRYPOINT 命令的后面</span></span><br><span class="line">[root@localhost dockerfile]# docker run 94635b3392fc -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Jul 25 15:27 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Jul 25 15:27 ..</span><br><span class="line">drwxr-xr-x.   5 root root 340 Jul 25 15:27 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 Jul 25 15:27 etc</span><br></pre></td></tr></tbody></table></figure><p>Dockerfile中很多命令十分相似，我们需要了解他们的区别</p><h3 id="实战-Tomcat-镜像"><a href="#实战-Tomcat-镜像" class="headerlink" title="实战 Tomcat 镜像"></a>实战 Tomcat 镜像</h3><ol><li>准备镜像文件 tomact 压缩包，jdk的压缩包</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# ls</span><br><span class="line">apache-tomcat-9.0.50.tar.gz  jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol><li>编写一个dockerfile文件，官方命名<code>Dockerfile</code>,<code>build</code>会自动寻找这个文件，不需要 <code>-f</code> 指定了。</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dockerfile 文件</span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINET guoxl&lt;xinleguo@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ADD 命令自动解压</span></span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.50.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置JAVA和TOMCAT的环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_171</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.50</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.50</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_BASH/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.50/bin/startup.sh &amp;&amp; tail -F /url/local/apache-tomcat-9.0.50/bin/logs/catalina.out</span><br></pre></td></tr></tbody></table></figure><ol><li>创建自己的镜像</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为使用的是dockerfile，所以不需要在指定</span></span><br><span class="line">[root@localhost mysql]# docker build -t diytomcat .</span><br></pre></td></tr></tbody></table></figure><ol><li>创建容器并启动</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# docker run -d -p 9090:8080 --name gxltomcat -v /home/mysql/test:/url/local/apache-tomcat-9.0.50/webapps/test -v /home/mysql/tomcatlogs/:/url/local/apache-tomcat-9.0.50/logs diytomcat</span><br><span class="line">e9ffcb0abd0eba046ed9e7b74cc12269a52ed2f710c6f728921e10adfd5fb9cc</span><br><span class="line">[root@localhost mysql]# docker exec -it e9ffcb0abd0e /bin/bash</span><br></pre></td></tr></tbody></table></figure><ol><li>访问测试</li><li>部署web项目到Tomcat中，部署成功，可以直接访问（略）</li></ol><p>之后的开发步骤，需要掌握DockerFile的编写</p><h3 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h3><blockquote><p>DockerHub</p></blockquote><ol><li>注册自己的账号（确定可以登陆）</li><li>提交自己的镜像</li><li>登陆，登陆完毕之后就可以上传镜像了</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line">  </span><br><span class="line">[root@localhost mysql]# docker login -u 17610826032</span><br><span class="line">Password:</span><br><span class="line">Login Successed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交镜像, 作者名/镜像名:[tag]，自己的镜像最好加上自己的版本号</span></span><br><span class="line">[root@localhost mysql]# docker push guoxl/diytomcat:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对镜像增加一个名字:[tag]</span></span><br><span class="line">[root@localhost mysql]# docker tag b38f9d66755c guoxl/tomcat:1.0</span><br><span class="line">[root@localhost mysql]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">guoxl/tomcat          1.0       b38f9d66755c   19 minutes ago   678MB</span><br><span class="line">diytomcat             latest    b38f9d66755c   19 minutes ago   678MB</span><br><span class="line">[root@localhost mysql]# docker push guoxl/tomcat:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登出</span></span><br><span class="line">docker logout</span><br></pre></td></tr></tbody></table></figure><blockquote><p>阿里云镜像服务器</p></blockquote><ol><li>登陆阿里云并找到自己的镜像服务（镜像仓库）</li><li>创建自己的命名空间（阿里云里面创建）</li><li>创建容器镜像仓库（阿里云里面创建）</li><li>浏览基本信息，会有具体操作信息（具体操作参考官方文档）</li></ol><blockquote><p>网站开源、部署项目都是发布镜像/容器</p></blockquote><p><img src="C:\Users\Gxl\AppData\Roaming\Typora\typora-user-images\image-20210726235545157.png" alt="image-20210726235545157"></p><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>容器编排、容器部署</p><h3 id="理解-Docker0"><a href="#理解-Docker0" class="headerlink" title="理解 Docker0"></a>理解 Docker0</h3><p>首先清空所有环境：<code>PS C:\Users\Gxl&gt; docker rmi -f $(docker images -aq)</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat01 tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器 IP地址，发现容器启动的时候会得到一个 eth0@if11 的 ip 地址，docker分配的</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ipip 0.0.0.0 brd 0.0.0.0</span><br><span class="line">3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/sit 0.0.0.0 brd 0.0.0.0</span><br><span class="line">10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">思考本地服务器 是否可以 ping 通容器内部 ：172.17.0.2</span></span><br><span class="line">PS C:\Users\Gxl&gt; ping 172.17.0.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">linux 可以 ping 通 docker 容器内部</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>原理</p></blockquote><ol><li>我们每启动一个 Docker 容器， docker 就会给 docker 容器分配一个 ip，我们只要安装了 docker，就会有一个网卡 docker0桥接模式，使用的技术是 env-pair 技术！</li></ol><p>再启动一个容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat02 tomcat</span><br><span class="line">546523fe7fb3eb70829108a710c65778f54be30cb8b123b29ea3e249ca243131</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看ip信息</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat02 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ipip 0.0.0.0 brd 0.0.0.0</span><br><span class="line">3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/sit 0.0.0.0 brd 0.0.0.0</span><br><span class="line">12: eth0@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们发现这个容器带来的网卡都是一对对的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">evth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连接协议，一端批次相连</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于这个原因， evth-pair可以作为一个桥梁，连接各种虚拟网络设备的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OpenStac， Docker容器之间的连接，OVS的连接，都是使用env-pair 技术</span></span><br></pre></td></tr></tbody></table></figure><ol><li>我们来测试一下 tomcat01 和 tomcat02 是否可以 ping 通！</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat02 ping 172.17.0.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结论：容器和容器之间是可以互相 ping 通的！</span></span><br></pre></td></tr></tbody></table></figure><p>结论： tomcat01 和 tomcat02 是公用的一个路由器—-docker0，只要删除容器，对应的网桥一对就没了！</p><p>所有的容器不指定网络的情况下，都是docker0 路由的，docker会给我们的容器分配一个默认的可用的 IP： 0 ~ 255    </p><p>255.255.0.1/16(16代表两位，一位是八)，代表可以存放255*255-2（广播地址和mask）-局域网</p><p>255.255.0.1/24，代表只有后面255个可以存储网络的范围-域</p><h3 id="—link"><a href="#—link" class="headerlink" title="—link"></a>—link</h3><blockquote><p>思考一个场景，我们编写了一个微服务，database url=ip，项目不重启，数据库ip换了，我们希望可以处理这个问题，可以用名字进行访问容器？</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat02 ping tomcat01</span><br><span class="line">ping: tomcat01: Name or service not known</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何解决？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过--<span class="built_in">link</span>来解决</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">79f4cbc766c1845fcffbf5f634f80724444fbee8d93262a1495eb196f99f336b</span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat03 ping tomcat02</span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.147 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在未配置的情况下，查看反向是否可以ping通</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不可以</span></span><br></pre></td></tr></tbody></table></figure><p>探究：inspect</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker network --help</span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line">Manage networks</span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run 'docker network COMMAND --help' for more information on a command.</span><br><span class="line"></span><br><span class="line">PS C:\Users\Gxl&gt; docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">eda7d0c2c96a   bridge    bridge    local</span><br><span class="line">d3656a69fbaf   host      host      local</span><br><span class="line">48ecdc979956   none      null      local</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker network inspect eda7d0c2c96a</span><br><span class="line">"Containers": {</span><br><span class="line">     "546523fe7fb3eb70829108a710c65778f54be30cb8b123b29ea3e249ca243131": {</span><br><span class="line">         "Name": "tomcat02",</span><br><span class="line">         "EndpointID": "79b597134e20063a2240381c5b71edaa2c4058951f6d125d10b1839d89d95356",</span><br><span class="line">         "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">         "IPv4Address": "172.17.0.3/16",</span><br><span class="line">         "IPv6Address": ""</span><br><span class="line">     },</span><br><span class="line">     "79f4cbc766c1845fcffbf5f634f80724444fbee8d93262a1495eb196f99f336b": {</span><br><span class="line">         "Name": "tomcat03",</span><br><span class="line">         "EndpointID": "1de12a280ecd92fa073cc417d86b693322988f0a5edb136bd2355ee3a6121918",</span><br><span class="line">         "MacAddress": "02:42:ac:11:00:04",</span><br><span class="line">         "IPv4Address": "172.17.0.4/16",</span><br><span class="line">         "IPv6Address": ""</span><br><span class="line">     },</span><br><span class="line">     "815db066728cda65001362d43dd7690ff3703640b27c5098510926f7c920e2ef": {</span><br><span class="line">         "Name": "tomcat01",</span><br><span class="line">         "EndpointID": "82f0a84448ddd1f36a89630a9baa5573f12e1ec77786e848767e968fafeba352",</span><br><span class="line">         "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">         "IPv4Address": "172.17.0.2/16",</span><br><span class="line">         "IPv6Address": ""</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网络配置</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.3      tomcat02 546523fe7fb3</span><br><span class="line">172.17.0.4      79f4cbc766c1</span><br><span class="line"></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat02 cat /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.3      546523fe7fb3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现tomcat03绑定了tomcat02，没有反向绑定</span></span><br></pre></td></tr></tbody></table></figure><p><strong>本质开发：已经不建议使用 —link</strong></p><p>docker0问题：不支持容器名访问</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p>容器互联 </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除一个网络</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker network rm host</span><br></pre></td></tr></tbody></table></figure><p><strong>网络模式</strong></p><ul><li>bridge：桥接 docker（默认）</li><li>none：不配置网络</li><li>host：和宿主机共享网络</li><li>container：容器网络连通！（用的少！不建议使用）</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个容器，默认配置的网络  --net bridge 可以省略</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker0特点：默认，域名不能访问，--<span class="built_in">link</span>可以打通</span></span><br></pre></td></tr></tbody></table></figure><p><strong>创建网络</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用参数 --driver --subnet</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker network create --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network create [OPTIONS] NETWORK</span><br><span class="line"></span><br><span class="line">Create a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d, --driver string        Driver to manage the Network (default "bridge")</span><br><span class="line">      --gateway strings      IPv4 or IPv6 Gateway for the master subnet</span><br><span class="line">      --ingress              Create swarm routing-mesh network</span><br><span class="line">      --internal             Restrict external access to the network</span><br><span class="line">      --ip-range strings     Allocate container ip from a sub-range</span><br><span class="line">      --ipam-driver string   IP Address Management Driver (default "default")</span><br><span class="line">      --ipam-opt map         Set IPAM driver specific options (default map[])</span><br><span class="line">      --ipv6                 Enable IPv6 networking</span><br><span class="line">      --label list           Set metadata on a network</span><br><span class="line">  -o, --opt map              Set driver specific options (default map[])</span><br><span class="line">      --scope string         Control the network's scope</span><br><span class="line">      --subnet strings       Subnet in CIDR format that represents a</span><br><span class="line">                             network segment</span><br><span class="line">                             </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--driver 连接模式（桥接）  --subnet 子网地址  --gateway 网关（wifi路由）</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">bf84863118e49b5f92be4359ef0ebe8f7c013951762a10b381a43de15005e4cd</span><br><span class="line">PS C:\Users\Gxl&gt; docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">eda7d0c2c96a   bridge    bridge    local</span><br><span class="line">d3656a69fbaf   host      host      local</span><br><span class="line">bf84863118e4   mynet     bridge    local</span><br><span class="line">48ecdc979956   none      null      local</span><br><span class="line"></span><br><span class="line">PS C:\Users\Gxl&gt; docker network inspect mynet</span><br><span class="line">"Config": [</span><br><span class="line">    {</span><br><span class="line">        "Subnet": "192.168.0.0/16",</span><br><span class="line">        "Gateway": "192.168.0.1"</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>使用自己创建的网络模式创建容器</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">961a633b06d2107c785e8128e5316df30fc37bbab1c77a94bb61041dcc7438ce</span><br><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line">4a54a1a2c164ad1f2c95072322ec435e939dc9a61801d4074148011312860001</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以看到在自己配置的网络模式下，创建的两个容器，ip变化情况</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker network inspect mynet</span><br><span class="line">"Containers": {</span><br><span class="line">    "4a54a1a2c164ad1f2c95072322ec435e939dc9a61801d4074148011312860001": {</span><br><span class="line">    "Name": "tomcat-net-02",</span><br><span class="line">    "EndpointID": "1ad5c900179171d7ca3b4a0d323222edbf89960bae8ea6840e5038747467636e",</span><br><span class="line">    "MacAddress": "02:42:c0:a8:00:03",</span><br><span class="line">    "IPv4Address": "192.168.0.3/16",</span><br><span class="line">    "IPv6Address": ""</span><br><span class="line">    },</span><br><span class="line">    "961a633b06d2107c785e8128e5316df30fc37bbab1c77a94bb61041dcc7438ce": {</span><br><span class="line">    "Name": "tomcat-net-01",</span><br><span class="line">    "EndpointID": "cd95f0afe15224e9cb25b411a311948cb3a1a6b4ce49832ba8e955f08eee3a75",</span><br><span class="line">    "MacAddress": "02:42:c0:a8:00:02",</span><br><span class="line">    "IPv4Address": "192.168.0.2/16",</span><br><span class="line">    "IPv6Address": ""</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再次查看两个容器的连接情况，再次测试<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat-net-01 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.029 ms</span><br><span class="line"></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat-net-01 ping tomcat-net-02</span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.055 ms</span><br></pre></td></tr></tbody></table></figure><p></p><p>我们自定义的网络docker都已经帮我们维护好了对应的关系，推荐我们平时这样使用网络！</p><p><strong>好处：</strong></p><p>不同的集群使用不同的网络，保证集群是安全和健康的</p><p>redis集群、mysql集群</p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><p><strong>测试</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用docker默认的当时创建两个容器</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat01 tomcat</span><br><span class="line">714fa78b631fe51fd4dd2740f15da33692a9c7718acb1484dd9c8c95f8012739</span><br><span class="line">PS C:\Users\Gxl&gt; docker run -d -P --name tomcat02 tomcat</span><br><span class="line">a108027e95645b07a60a0681ad135fb2eddccb4d6cc2b4b9220c2a772753728f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试使用自己的网络创建的容器和默认创建的容器是否可以网络连通</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连通不能</span></span><br></pre></td></tr></tbody></table></figure><p>使用 network 实现两个不同网段的容器互联</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker network --help</span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立网络连接</span></span><br><span class="line">PS C:\Users\Gxl&gt; docker network connect mynet tomcat01</span><br></pre></td></tr></tbody></table></figure><p>测试，发现两个网段都有 tomcat01，可以ping 通tomcat-net-01</p><p>一个容器两个ip地址</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker network inspect mynet</span><br><span class="line">"Containers": {  "714fa78b631fe51fd4dd2740f15da33692a9c7718acb1484dd9c8c95f8012739": {</span><br><span class="line">    "Name": "tomcat01",</span><br><span class="line">    "EndpointID": "be42cfdab97659c40945d772bc34938af33fa73b5c524d2a5c069cbf46fc4b6a",</span><br><span class="line">    "MacAddress": "02:42:c0:a8:00:04",</span><br><span class="line">    "IPv4Address": "192.168.0.4/16",</span><br><span class="line">    "IPv6Address": ""</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PS C:\Users\Gxl&gt; docker network inspect bridge</span><br><span class="line">"Containers": {  "714fa78b631fe51fd4dd2740f15da33692a9c7718acb1484dd9c8c95f8012739": {</span><br><span class="line">    "Name": "tomcat01",</span><br><span class="line">    "EndpointID": "07733abd6a531cfdfbf8ba92db6206b1b8242a566bd4d2f1133c75ef91b06eba",</span><br><span class="line">    "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">    "IPv4Address": "172.17.0.2/16",</span><br><span class="line">    "IPv6Address": ""</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h3 id="实战：部署-Redis-集群"><a href="#实战：部署-Redis-集群" class="headerlink" title="实战：部署 Redis 集群"></a>实战：部署 Redis 集群</h3><p>分片+高可用+负载均衡</p><p>首先先建立一个redis网络</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Gxl&gt; docker network create redis --subnet 172.38.0.0/16</span><br><span class="line">ae409f017df79fd219b3b8a6df4e73bd6bcdc14cd14923f2bcc62deb11ef57e0</span><br></pre></td></tr></tbody></table></figure><p>通过脚本创建六个redis配置</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-${port}/conf</span><br><span class="line">touch /mydata/redis/node-${port}/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/m/mydata/redis/node-${port}/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1${port}</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树算法模板</title>
      <link href="/2022/03/27/basic-algorithm-template/zui-xiao-sheng-cheng-shu-suan-fa-mo-ban/"/>
      <url>/2022/03/27/basic-algorithm-template/zui-xiao-sheng-cheng-shu-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="最小生成树算法模板"><a href="#最小生成树算法模板" class="headerlink" title="最小生成树算法模板"></a>最小生成树算法模板</h1><p>假设 <code>n</code> 表示图中点数，<code>m</code> 表示图中边数。</p><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><p>适用于稠密图，时间复杂度 <code>O(n2)</code>。核心思想：每次挑一条与当前集合相连的最短边。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// st[i] 表示点i是否在当前生成树集合中</span></span><br><span class="line"><span class="comment">// dist[i] 表示点i到当前集合的最短边的长度</span></span><br><span class="line"><span class="comment">// g[i][j] 表示点i和点j之间边的长度</span></span><br><span class="line"><span class="comment">// 返回值：最小生成树中所有边的总长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        dist[i] = INF;</span><br><span class="line">        st[i] = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> id = <span class="number">-1</span>, min_dist = INF;</span><br><span class="line">        <span class="comment">// 寻找最短边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; dist[j] &lt; min_dist)</span><br><span class="line">            {</span><br><span class="line">                id = j;</span><br><span class="line">                min_dist = dist[j];</span><br><span class="line">            }</span><br><span class="line">        st[id] = <span class="literal">true</span>;</span><br><span class="line">        res += dist[id];</span><br><span class="line">        <span class="comment">// 用新加入的点更新其余点到生成树的最短边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j])</span><br><span class="line">                dist[j] = <span class="built_in">min</span>(dist[j], g[id][j]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Kruskal算法-（使用并查集来进行合并）"><a href="#Kruskal算法-（使用并查集来进行合并）" class="headerlink" title="Kruskal算法 （使用并查集来进行合并）"></a>Kruskal算法 （使用并查集来进行合并）</h2><p>适用于稀疏图，时间复杂度 <code>O(mlogm)</code>。核心思想：从小到大挑不多余的边。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 边的信息</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a, b, v;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W) <span class="type">const</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> v &lt; W.v;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 并查集——寻找当前集合的代表元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (father[x] != x) father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有边存储在 Edge edges[M]; </span></span><br><span class="line"><span class="comment">// 函数返回最小生成树中所有边的总长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化并查集代表元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) father[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(edge, edge + m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> a = edge[i].a, b = edge[i].b;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(a) != <span class="built_in">find</span>(b))</span><br><span class="line">        {</span><br><span class="line">            res += edge[i].v;</span><br><span class="line">            father[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径算法模板</title>
      <link href="/2022/03/27/basic-algorithm-template/zui-duan-lu-suan-fa-mo-ban/"/>
      <url>/2022/03/27/basic-algorithm-template/zui-duan-lu-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路算法模板"><a href="#最短路算法模板" class="headerlink" title="最短路算法模板"></a>最短路算法模板</h1><p>我们只需考虑有向图上的算法，因为无向图是特殊的有向图。我们可以将所有无向边 <code>u &lt;-&gt; v</code>，都拆分成两条有向边：<code>u &lt;- u</code> 和 <code>u -&gt; v</code>。为了方便叙述，我们做如下约定：<code>n</code> 表示图中点数，<code>m</code> 表示图中边数。</p><h2 id="最短路算法分为两大类："><a href="#最短路算法分为两大类：" class="headerlink" title="最短路算法分为两大类："></a>最短路算法分为两大类：</h2><ul><li>单源最短路，常用算法有：<ul><li><code>dijkstra</code>，只有所有边的权值为正时才可以使用。在稠密图上的时间复杂度是 <code>O(n^2)</code>，稀疏图上的时间复杂度是 <code>O(mlogn)</code>。</li><li><code>spfa</code>，不论边权是正的还是负的，都可以做。算法平均时间复杂度是 <code>O(km)</code>，<code>k</code> 是常数。 强烈推荐该算法。</li></ul></li><li>多源最短路，一般用<code>floyd</code>算法。代码很短，三重循环，时间复杂度是 <code>O(n3)</code>。</li></ul><p>算法模板：我们以 <a href="http://poj.org/problem?spm=a2c4e.11153940.blogcont9125.12.73ce6c6aEoRUod&amp;id=2387">poj2387 Til the Cows Come Home</a> 题目为例，给出上述所有算法的模板。</p><p>题目大意：给一张无向图，<code>n</code> 个点 <code>m</code> 条边，求从<code>1</code>号点到 <code>n</code> 号点的最短路径。输入中可能包含重边。</p><h3 id="1、dijkstra算法O-n-2"><a href="#1、dijkstra算法O-n-2" class="headerlink" title="1、dijkstra算法O(n^2)"></a>1、<code>dijkstra</code>算法<code>O(n^2)</code></h3><p>最裸的<code>dijkstra</code>算法，不用堆优化。每次暴力循环找距离最近的点。图用<strong>邻接矩阵</strong>存储。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">2000010</span>, INF = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N], dist[N];   <span class="comment">// g[][]存储图的邻接矩阵, dist[]表示每个点到起点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dist[i] = INF;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> id, mind = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; dist[j] &lt; mind)</span><br><span class="line">            {</span><br><span class="line">                mind = dist[j];</span><br><span class="line">                id = j;</span><br><span class="line">            }</span><br><span class="line">        st[id] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) dist[j] = <span class="built_in">min</span>(dist[j], dist[id] + g[id][j]);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            g[i][j] = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、dijkstra-heap优化-O-mlogn"><a href="#2、dijkstra-heap优化-O-mlogn" class="headerlink" title="2、dijkstra+heap优化 O(mlogn)"></a>2、<code>dijkstra+heap</code>优化 <code>O(mlogn)</code></h3><p>用堆维护所有点到起点的距离。时间复杂度是 <code>O(mlogn)</code>。这里我们可以手写堆，可以支持对堆中元素的修改操作，堆中元素个数不会超过 <code>n</code>。也可以直接使用<code>STL</code>中的<code>priority_queue</code>，但不能支持对堆中元素的修改，不过我们可以将所有修改过的点直接插入堆中，堆中会有重复元素，但堆中元素总数不会大于 <code>m</code>。只能处理边权为正数的问题。图用<strong>邻接表</strong>存储。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>({<span class="number">0</span>, <span class="number">1</span>});      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i])</span><br><span class="line">            {</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>({dist[j], j});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3、spfa算法-O-km"><a href="#3、spfa算法-O-km" class="headerlink" title="3、spfa算法 O(km)"></a>3、<code>spfa</code>算法 <code>O(km)</code></h3><p><code>bellman-ford</code>算法的优化版本，可以处理存在负边权的最短路问题。最坏情况下的时间复杂度是 <code>O(nm)</code>，但实践证明<code>spfa算法</code>的运行效率非常高，期望运行时间是 <code>O(km)</code>，其中 <code>k</code> 是常数。但需要注意的是，在网格图中，<code>spfa算法</code>的效率比较低，如果边权为正，则尽量使用 <code>dijkstra</code> 算法。</p><p>图采用邻接表存储。队列为手写的循环队列。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">2000010</span>, INF = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dist[N], q[N];      <span class="comment">// dist表示每个点到起点的距离, q 是队列</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], v[M], ne[M], idx;       <span class="comment">// 邻接表</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    e[idx] = b, v[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dist[i] = INF;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q[tt++] = <span class="number">1</span>, st[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (hh != tt)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        st[t] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (hh == n) hh = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span> (dist[e[i]] &gt; dist[t] + v[i])</span><br><span class="line">            {</span><br><span class="line">                dist[e[i]] = dist[t] + v[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[e[i]])</span><br><span class="line">                {</span><br><span class="line">                    st[e[i]] = <span class="number">1</span>;</span><br><span class="line">                    q[tt++] = e[i];</span><br><span class="line">                    <span class="keyword">if</span> (tt == n) tt = <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">        <span class="built_in">add</span>(b, a, c);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、floyd算法-O-n-3"><a href="#4、floyd算法-O-n-3" class="headerlink" title="4、floyd算法 O(n^3)"></a>4、<code>floyd</code>算法 <code>O(n^3)</code></h3><p>标准弗洛伊德算法，三重循环。循环结束之后 <code>d[i][j]</code>存储的就是点 <code>i</code> 到点 <code>j</code> 的最短距离。<br>需要注意循环顺序不能变：第一层枚举中间点，第二层和第三层枚举起点和终点。</p><p>由于这道题目的数据范围较大，点数最多有1000个，因此<code>floyd</code>算法会超时。但我们的目的是给出算法模板哦~</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">2000010</span>, INF = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> d[N][N];    <span class="comment">// 存储两点之间的最短距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            d[i][j] = i == j ? <span class="number">0</span> : INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        d[a][b] = d[b][a] = <span class="built_in">min</span>(c, d[a][b]);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// floyd 算法核心</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">    cout &lt;&lt; d[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速乘法模板</title>
      <link href="/2022/03/26/basic-algorithm-template/kuai-su-cheng-fa-mo-ban/"/>
      <url>/2022/03/26/basic-algorithm-template/kuai-su-cheng-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="快速乘法模板"><a href="#快速乘法模板" class="headerlink" title="快速乘法模板"></a>快速乘法模板</h1><p><strong>快速乘法</strong>使用二进制将乘法转化为加法，既加快可以加快运算速度，又可以防止直接相乘之后溢出</p><h2 id="方法一：简单写法"><a href="#方法一：简单写法" class="headerlink" title="方法一：简单写法"></a>方法一：简单写法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ll <span class="title function_">quickMul</span><span class="params">(ll a,ll b,ll mod)</span></span><br><span class="line">{</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b){</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(res+a)%mod;</span><br><span class="line">        a=(a+a)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="方法二：更快更高效的写法"><a href="#方法二：更快更高效的写法" class="headerlink" title="方法二：更快更高效的写法"></a>方法二：更快更高效的写法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ll <span class="title function_">mul</span><span class="params">(ll a,ll b,ll mod)</span></span><br><span class="line">{</span><br><span class="line">    a%=mod;</span><br><span class="line">    b%=mod;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b){</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>){</span><br><span class="line">            res+=a;</span><br><span class="line">            <span class="keyword">if</span>(res&gt;=mod)</span><br><span class="line">                res-=mod;</span><br><span class="line">        }</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=mod)  a-=mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>—</p><p><strong>利用快速乘法优化的快速幂</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ll <span class="title function_">mul</span><span class="params">(ll a,ll b,ll mod)</span></span><br><span class="line">{</span><br><span class="line">    a%=mod;</span><br><span class="line">    b%=mod;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b){</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>){</span><br><span class="line">        <span class="comment">//printf("%lld %lld %lld\n",a,b,res);</span></span><br><span class="line">            res+=a;</span><br><span class="line">            <span class="keyword">if</span>(res&gt;=mod)</span><br><span class="line">                res-=mod;</span><br><span class="line">        }</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;=mod)  a-=mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line">ll <span class="title function_">quickPow</span><span class="params">(ll a,ll b,ll m)</span></span><br><span class="line">{</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b){</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">        res=mul(res,a,m);</span><br><span class="line">        a=mul(a,a,m);</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
            <tag> 快速乘法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂算法模板</title>
      <link href="/2022/03/26/basic-algorithm-template/kuai-su-mi-suan-fa-mo-ban/"/>
      <url>/2022/03/26/basic-algorithm-template/kuai-su-mi-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="快速幂算法模板"><a href="#快速幂算法模板" class="headerlink" title="快速幂算法模板"></a>快速幂算法模板</h1><p>求 <code>m^k%p</code>，时间复杂度 <code>O(logk)</code>。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % p, t = m;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) res = res * t % p;</span><br><span class="line">        t = t * t % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
            <tag> 幂算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马拉车算法模板</title>
      <link href="/2022/03/26/basic-algorithm-template/ma-la-che-suan-fa-mo-ban-ti/"/>
      <url>/2022/03/26/basic-algorithm-template/ma-la-che-suan-fa-mo-ban-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="马拉车算法"><a href="#马拉车算法" class="headerlink" title="马拉车算法"></a>马拉车算法</h1><p>解决求最长回文串，时间复杂度为<code>O(n)</code></p><h2 id="1、预处理（长度奇偶均处理成如此）"><a href="#1、预处理（长度奇偶均处理成如此）" class="headerlink" title="1、预处理（长度奇偶均处理成如此）"></a>1、预处理（长度奇偶均处理成如此）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i       <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br><span class="line">arr[i]  $ # c # a # b # b # a  #  f  #</span><br><span class="line">p[i]      <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2、计算原始索引"><a href="#2、计算原始索引" class="headerlink" title="2、计算原始索引"></a>2、计算原始索引</h2><p><code>int index = (i - p[i])/2</code></p><h2 id="3、计算p数组"><a href="#3、计算p数组" class="headerlink" title="3、计算p数组"></a>3、计算<code>p</code>数组</h2><p>设置两个变量<code>id</code>和<code>mx</code>，<code>id</code>是所有回文子串中，能延伸到最右端位置的那个回文子串的中心点位置，<code>mx</code>是该回文串能延伸到的最右端的位置。</p><p>当<code>i</code>等于<code>7</code>时，<code>id</code>等于<code>7</code>，<code>p[id] = 5</code>，在以位置<code>7</code>为中心的回文子串中，该回文子串的右边界是位置<code>12</code>。</p><p>当<code>i</code>等于<code>12</code>时，<code>id</code>等于<code>12</code>，<code>p[id] = 2</code>，在以位置<code>12</code>为中心的回文子串中，该回文子串的右边界是位置<code>14</code>。</p><p>由此我们可以得出回文子串右边界和其半径之间的关系：<code>mx = p[id]+id</code>。</p><hr><p>因为回文字符串是中心对称的，知道中心点位置<code>id</code>，如果一个位置的回文子串以<code>i</code>为中心，并且包含在以<code>id</code>为中心的回文子串中，即<code>mx &gt; i</code>，那么肯定会存在另外一个以<code>j</code>为中心回文子串，和以<code>i</code>为中心的回文子串相等且对称，即<code>p[j] = p[i]</code>，而<code>i</code>和<code>j</code>是以<code>id</code>为中心对称，即<code>i+j=2*id</code>，如果知道了i的值，那么<code>j = 2*id - i</code>。</p><p>但是我们需要考虑另外一种情况，如果存在一个以<code>i</code>为中心的回文子串，依旧有<code>mx &gt; i</code>，但是以<code>i</code> 为中心的回文子串右边界超过了<code>mx</code>，在<code>i</code>到<code>mx</code>的这段回文子串中，与另一端对称的以<code>j</code>为中心的回文子串还是相等的，此时<code>p[i] = mx - i</code>，<code>p[j] = [pi]</code>，至于右边界<code>mx</code>之外的子串，即以<code>i</code>为中心的回文子串超出的部分是否还是满足上述条件就需要遍历比较字符了。</p><p>因此，在<code>mx &gt; i</code>的情况下，<code>p[i] = Math.min(p[2*id - i], mx - i)</code>。<br> 另外如果<code>i</code>大于<code>mx</code>了，也即是边界<code>mx</code>后面的子串，依旧需要去比较字符计算。</p><h2 id="4、代码"><a href="#4、代码" class="headerlink" title="4、代码"></a>4、代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">Manacher</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 第一步：预处理，将原字符串转换为新字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">"$"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) {</span><br><span class="line">        t += <span class="string">"#"</span> + s.charAt(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 尾部再加上字符@，变为奇数长度字符串</span></span><br><span class="line">    t += <span class="string">"#@"</span>;</span><br><span class="line">    <span class="comment">// 第二步：计算数组p、起始索引、最长回文半径</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> t.length();</span><br><span class="line">    <span class="comment">// p数组</span></span><br><span class="line">    <span class="type">int</span>[] p = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 最长回文子串的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 最长回文子串的中心位置索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;n-<span class="number">1</span>; j++) {</span><br><span class="line">        <span class="comment">// 参看前文第五部分</span></span><br><span class="line">        p[j] = mx &gt; j ? Math.min(p[<span class="number">2</span>*id-j], mx-j) : <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 向左右两边延伸，扩展右边界</span></span><br><span class="line">        <span class="keyword">while</span> (t.charAt(j+p[j]) == t.charAt(j-p[j])) {</span><br><span class="line">            p[j]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果回文子串的右边界超过了mx，则需要更新mx和id的值</span></span><br><span class="line">        <span class="keyword">if</span> (mx &lt; p[j] + j) {</span><br><span class="line">            mx = p[j] + j;</span><br><span class="line">            id = j;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果回文子串的长度大于maxLength，则更新maxLength和index的值</span></span><br><span class="line">        <span class="keyword">if</span> (maxLength &lt; p[j] - <span class="number">1</span>) {</span><br><span class="line">            <span class="comment">// 参看前文第三部分</span></span><br><span class="line">            maxLength = p[j] - <span class="number">1</span>;</span><br><span class="line">            index = j;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 第三步：截取字符串，输出结果</span></span><br><span class="line">    <span class="comment">// 起始索引的计算参看前文第四部分</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (index-maxLength)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLength);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
            <tag> 马拉车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法模板集合</title>
      <link href="/2022/03/26/basic-algorithm-template/pai-xu-suan-fa-mo-ban/"/>
      <url>/2022/03/26/basic-algorithm-template/pai-xu-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="算法基础相关代码模板"><a href="#算法基础相关代码模板" class="headerlink" title="算法基础相关代码模板"></a><a href="https://www.acwing.com/blog/content/277/">算法基础相关代码模板</a></h1><h2 id="1、快速排序算法模板-——-模板题"><a href="#1、快速排序算法模板-——-模板题" class="headerlink" title="1、快速排序算法模板 —— 模板题"></a>1、快速排序算法模板 —— 模板题</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2、归并排序算法模板-——-模板题"><a href="#2、归并排序算法模板-——-模板题" class="headerlink" title="2、归并排序算法模板 —— 模板题"></a>2、归并排序算法模板 —— 模板题</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3、整数二分算法模板-——-模板题"><a href="#3、整数二分算法模板-——-模板题" class="headerlink" title="3、整数二分算法模板 —— 模板题"></a>3、整数二分算法模板 —— 模板题</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>{<span class="comment">/* ... */</span>} <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4、浮点数二分算法模板-——-模板题"><a href="#4、浮点数二分算法模板-——-模板题" class="headerlink" title="4、浮点数二分算法模板 —— 模板题"></a>4、浮点数二分算法模板 —— 模板题</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>{<span class="comment">/* ... */</span>} <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5、高精度计算方法-——-模板题"><a href="#5、高精度计算方法-——-模板题" class="headerlink" title="5、高精度计算方法 —— 模板题"></a>5、高精度计算方法 —— 模板题</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高精度加法</span></span><br><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    {</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高精度减法</span></span><br><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    {</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高精度乘法</span></span><br><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高精度除法</span></span><br><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    {</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6、前缀和"><a href="#6、前缀和" class="headerlink" title="6、前缀和"></a>6、前缀和</h2><p><strong>一维前缀和 —— 模板题</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S[i] = a[1] + a[2] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - 1]</span><br></pre></td></tr></tbody></table></figure><p><strong>二维前缀和 —— 模板题</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</span><br></pre></td></tr></tbody></table></figure><h2 id="7、差分"><a href="#7、差分" class="headerlink" title="7、差分"></a>7、差分</h2><p>差分是求前缀和的逆操作，对于原数组<code>a[n]</code>构造出一个数组<code>b[n]</code>,使<code>a[n]</code>为<code>b[n]</code>的前缀和。一般用于快速对整个数组进行操作，比如对将 <code>a</code> 数组中<code>[l,r]</code> 部分的数据全部加上<code>c</code> 。使用暴力方法的话，时间复杂至少为<code>O(n)</code>，而使用差分算法可以将时间复杂度降低到<code>O(1)</code>。</p><p><strong><u>算法思路</u></strong>：<br>拥有数组<code>b[n]</code>后，想要对<code>a</code>数组中所有的数据加上<code>c</code>，只需要将<code>b[1]+c</code>即可，因为<code>a[i]</code>是<code>b[i]</code>的前缀和，<code>a[i]=b[1]+b[1]+b[3]+……+b[n]</code>。<code>b[1]</code>是所有的<code>a[i]</code>都拥有的子元素,将<code>b[0]+c</code>，那么<code>a[n]</code>中所有的数据都会加上<code>c</code>。如果想将<code>a</code>数组中<code>[l,r]</code>部分的数据全部加上<code>c</code>，只需要将<code>b[l]+c</code>，然后<code>b[r+1]-c</code>即可。</p><p><strong>一维差分 —— 模板题</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给区间[l, r]中的每个数加上c：B[l] += c, B[r + 1] -= c</span><br></pre></td></tr></tbody></table></figure><p><strong>二维差分 —— 模板题</strong><br></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</span><br><span class="line">S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="8、位运算-——-模板题"><a href="#8、位运算-——-模板题" class="headerlink" title="8、位运算 —— 模板题"></a>8、位运算 —— 模板题</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 二进制中</span><br><span class="line">求n的第k位数字: n &gt;&gt; k &amp; 1</span><br><span class="line">返回n的最后一位1：lowbit(n) = n &amp; -n</span><br></pre></td></tr></tbody></table></figure><h2 id="9、双指针算法-——-模板题"><a href="#9、双指针算法-——-模板题" class="headerlink" title="9、双指针算法 —— 模板题"></a>9、双指针算法 —— 模板题</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0, j = 0; i &lt; n; i ++ )</span><br><span class="line">{</span><br><span class="line">    while (j &lt; i &amp;&amp; check(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    // 具体问题的逻辑</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>常见问题分类：</p><ol><li>对于一个序列，用两个指针维护一段区间；</li><li>对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</li></ol><h2 id="10、区间合并-——-模板题"><a href="#10、区间合并-——-模板题" class="headerlink" title="10、区间合并 —— 模板题"></a>10、区间合并 —— 模板题</h2><pre><code>// 将所有存在交集的区间合并void merge(vector&lt;PII&gt; &amp;segs){    vector&lt;PII&gt; res;    sort(segs.begin(), segs.end());    int st = -2e9, ed = -2e9;    for (auto seg : segs)        if (ed &lt; seg.first)        {            if (st != -2e9) res.push_back({st, ed});            st = seg.first, ed = seg.second;        }        else ed = max(ed, seg.second);    if (st != -2e9) res.push_back({st, ed});    segs = res;}</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>偏移量技巧</title>
      <link href="/2022/03/26/basic-algorithm-template/pian-yi-liang-ji-qiao/"/>
      <url>/2022/03/26/basic-algorithm-template/pian-yi-liang-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="偏移量技巧"><a href="#偏移量技巧" class="headerlink" title="偏移量技巧"></a>偏移量技巧</h1><p>矩阵中位置关系（注意代码中坐标系与平时所见不一样）：</p><script type="math/tex; mode=display">\begin{matrix}x-1,y-1& x-1,y(0) &x-1,y+1\\x,y-1(3) & x,y & x,y+1(1) \\x+1,y-1& x+1,y(2) &x+1,y+1\end{matrix}</script><p>可以使用这个向量来进行循环操作，简单方便</p><script type="math/tex; mode=display">\begin{matrix}& -1,0&\\0,-1&0,0&0,1\\&1,0&\\\end{matrix}</script><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]{-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>}, dy = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>}</span><br></pre></td></tr></tbody></table></figure><h2 id="题目：蛇形矩阵"><a href="#题目：蛇形矩阵" class="headerlink" title="题目：蛇形矩阵"></a>题目：蛇形矩阵</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt(), m = scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">        <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]{-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>}, dy = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>};</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>, d = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n * m; i++) {</span><br><span class="line">            ans[x][y] = i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> x + dx[d], b = y + dy[d];</span><br><span class="line">            <span class="comment">// 判断下一步是否出界 或者 已经走过</span></span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m || ans[a][b] != <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 更新方向</span></span><br><span class="line">                d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                a = x + dx[d];</span><br><span class="line">                b = y + dy[d];</span><br><span class="line">            }</span><br><span class="line">            x = a;</span><br><span class="line">            y = b;</span><br><span class="line">        }</span><br><span class="line">        System.out.print(Arrays.deepToString(ans));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列实现</title>
      <link href="/2022/03/26/basic-algorithm-template/quan-pai-lie/"/>
      <url>/2022/03/26/basic-algorithm-template/quan-pai-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="交换元素的方式进行全排列"><a href="#交换元素的方式进行全排列" class="headerlink" title="交换元素的方式进行全排列"></a>交换元素的方式进行全排列</h1><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a></h2><p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p><p>主要思想，交换位置，确定数组前面部分的排列，对后面的进行操作（交换位置）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> m)</span> {</span><br><span class="line">        <span class="keyword">if</span> (m == nums.length) {</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">                list.add(num);</span><br><span class="line">            }</span><br><span class="line">            ans.add(list);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &lt; nums.length; i++) {</span><br><span class="line">                swap(nums, i, m);</span><br><span class="line">                <span class="comment">// 前面的位置已经确定，对后面的位置进行操作</span></span><br><span class="line">                dfs(nums, m + <span class="number">1</span>);</span><br><span class="line">                swap(nums, i, m);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        dfs(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求解斐波那契数列的若干方法</title>
      <link href="/2022/03/26/basic-algorithm-template/qiu-jie-fei-bo-na-qi-shu-lie-de-ruo-gan-fang-fa/"/>
      <url>/2022/03/26/basic-algorithm-template/qiu-jie-fei-bo-na-qi-shu-lie-de-ruo-gan-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="求解斐波那契数列的若干方法"><a href="#求解斐波那契数列的若干方法" class="headerlink" title="求解斐波那契数列的若干方法"></a>求解斐波那契数列的若干方法</h1><p>首先定义斐波那契数列问题：</p><blockquote><p>定义 <code>a0=1, a1=1, an=a_(n−1)+a_(n−2)</code>，求 <code>an</code> 是多少。<br>为了避免考虑整数溢出问题，我们求 <code>an%p</code>的值，<code>p=10^9+7</code>。</p></blockquote><h2 id="算法1：递归"><a href="#算法1：递归" class="headerlink" title="算法1：递归"></a>算法1：递归</h2><p>递归计算的节点个数是 O(2n)O(2n) 的级别的，存在大量重复计算。时间复杂度是 O(2n)O(2n)，一秒内大约能算到第三四十项。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>)) % MOD;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="算法2：记忆化搜索"><a href="#算法2：记忆化搜索" class="headerlink" title="算法2：记忆化搜索"></a>算法2：记忆化搜索</h2><p>开一个大数组记录中间结果，如果一个状态被计算过，则直接查表，否则再递归计算。总共有 <code>n</code> 个状态，计算每个状态的复杂度是 <code>O(1)</code>，所以时间复杂度是 <code>O(n)</code>。一秒内算 <code>n=10^7</code> 毫无压力，但由于是递归计算，递归层数太多会爆栈，大约只能算到 <code>n=10^5</code> 级别。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f2</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a[n]) <span class="keyword">return</span> a[n];</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    a[n] = <span class="built_in">f2</span>(n - <span class="number">1</span>) + <span class="built_in">f2</span>(n - <span class="number">2</span>);</span><br><span class="line">    a[n] %= MOD;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="算法3：递推"><a href="#算法3：递推" class="headerlink" title="算法3：递推"></a>算法3：递推</h2><p>开一个大数组，记录每个数的值。用循环递推计算。总共计算 <code>n</code> 个状态，所以时间复杂度是 <code>O(n)</code>。<br>但需要开一个长度是 <code>n</code> 的数组，内存将成为瓶颈，当 <code>n=10^8</code> 时，需要的内存是 </p><script type="math/tex; mode=display">\frac{4*10^8}{1024 * 1024}\cong381MB</script><p>分子中乘<code>4</code>是因为<code>C++</code>中 <code>int</code> 类型占4字节。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f3</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    a[<span class="number">0</span>] = a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">        a[i] %= MOD;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="算法4：递归-滚动变量。"><a href="#算法4：递归-滚动变量。" class="headerlink" title="算法4：递归+滚动变量。"></a>算法4：递归+滚动变量。</h2><p>仔细观察我们会发现，递推时我们只需要记录前两项的值即可，没有必要记录所有值，所以我们可以用滚动变量递推。时间复杂度还是 <code>O(n)</code>，但空间复杂度变成了 <code>O(1)</code>。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f4</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    x = y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        z = (x + y) % MOD;</span><br><span class="line">        x = y;</span><br><span class="line">        y = z;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="算法5：矩阵运算-快速幂。"><a href="#算法5：矩阵运算-快速幂。" class="headerlink" title="算法5：矩阵运算 + 快速幂。"></a>算法5：矩阵运算 + 快速幂。</h2><p>用算法<code>4</code>我们<code>1</code>秒内最多可以算到 <code>10^8</code> 级别，那当 <code>n</code> 更大时该怎么办呢？可以先利用矩阵运算的性质将通项公式变成幂次形式，然后用平方倍增（快速幂）的方法求解第 <code>n</code> 项。</p><p>首先我们定义向量：</p><script type="math/tex; mode=display">X_n=[a_n, a_{n-1}]，边界：x_1=[a_1, a_0]</script><p>然后我们可以找出矩阵：</p><script type="math/tex; mode=display">A=\begin{bmatrix} 1 & 1 \\ 1 & 0 \\ \end{bmatrix}</script><p>则有：</p><script type="math/tex; mode=display">X_n=X_{n−1}×A</script><p>所以：</p><script type="math/tex; mode=display">X_n=X_1×A^{n−1}</script><p>由于矩阵具有结合律，所以我们可以先求出 <code>A^{n−1}%P</code>，然后再用 <code>X_1</code> 左乘，即可求出 <code>X_n</code>，向量 <code>X_n</code> 的第一个元素就是 <code>a_n</code>。时间复杂度分析：快速幂的时间复杂度是 <code>O(logn)</code>，所以算法<code>5</code>的时间复杂度也是 <code>O(logn)</code>。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a[][<span class="number">2</span>], <span class="type">int</span> b[][<span class="number">2</span>], <span class="type">int</span> c[][<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> temp[][<span class="number">2</span>] = {{<span class="number">0</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">0</span>}};</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> x = temp[i][j] + (<span class="type">long</span> <span class="type">long</span>)a[i][k] * b[k][j];</span><br><span class="line">                temp[i][j] = x % MOD;</span><br><span class="line">            }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">            c[i][j] = temp[i][j];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f_final</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> x[<span class="number">2</span>] = {<span class="number">1</span>, <span class="number">1</span>};</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res[][<span class="number">2</span>] = {{<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line">    <span class="type">int</span> t[][<span class="number">2</span>] = {{<span class="number">1</span>, <span class="number">1</span>}, {<span class="number">1</span>, <span class="number">0</span>}};</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) <span class="built_in">mul</span>(res, t, res);</span><br><span class="line">        <span class="built_in">mul</span>(t, t, t);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> c[<span class="number">2</span>] = {<span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> r = c[i] + (<span class="type">long</span> <span class="type">long</span>)x[j] * res[j][i];</span><br><span class="line">            c[i] = r % MOD;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n ;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f_final</span>(n) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论问题模板</title>
      <link href="/2022/03/26/basic-algorithm-template/shu-lun-wen-ti-suan-fa-mo-ban/"/>
      <url>/2022/03/26/basic-algorithm-template/shu-lun-wen-ti-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="数论问题算法模板"><a href="#数论问题算法模板" class="headerlink" title="数论问题算法模板"></a>数论问题算法模板</h1><h2 id="1-欧几里得算法"><a href="#1-欧几里得算法" class="headerlink" title="1. 欧几里得算法"></a>1. 欧几里得算法</h2><p>求两个正整数的最大公约数，时间复杂度 <code>O(logn)</code>。计算<code>(a, b)</code>， 若<code>b</code>是0，则最大公约数为<code>a</code>；否则。将<code>a</code>除以<code>b</code>得到余数<code>r</code>，<code>a</code>和<code>b</code>的最大公约数就是<code>b</code>和<code>r</code>的最大公约数，即：<code>(a, b) = (b, r)</code></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最小公倍数求法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b)</span></span>{</span><br><span class="line">      <span class="keyword">return</span> a*b / <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-扩展欧几里得算法"><a href="#2-扩展欧几里得算法" class="headerlink" title="2. 扩展欧几里得算法"></a>2. 扩展欧几里得算法</h2><p>裴蜀定理：若 <code>a,b</code> 是整数,且 <code>(a,b) = d</code>，那么对于任意的整数 <code>x,y,ax + by</code> 都一定是 <code>d</code> 的倍数，特别地，一定存在整数 <code>x,y</code>，使<code>ax + by = d</code> 成立。扩展欧几里得算法可以在 <code>O(logn)</code>的时间复杂度内求出系数 <code>x,y</code>。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    {</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= (a/b) * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-线性筛素数"><a href="#3-线性筛素数" class="headerlink" title="3. 线性筛素数"></a>3. 线性筛素数</h2><p>可以在 <code>O(n)</code>的时间复杂度内求出 <code>1∼n</code>之间的所有质数。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        {</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-欧拉函数"><a href="#4-欧拉函数" class="headerlink" title="4. 欧拉函数"></a>4. 欧拉函数</h2><p>欧拉函数，一般记为 <code>ϕ(n)</code>，表示小于等于 <code>n</code> 的数中与 <code>n</code> 互质的数的个数。如果 <code>n=p1^a1 × p2^a2 × … × pm^am</code>,<br>则 <code>ϕ(n)=n(1 − 1/p1) … (1 − 1/pm)</code>.</p><p><strong>欧拉函数的常用性质：</strong></p><ul><li>如果 <code>n,m</code> 互质，则 <code>ϕ(nm)=ϕ(n)ϕ(m)</code>;</li><li>小于等于 <code>n</code>，且与 <code>n</code> 互质的数的和是 <code>ϕ(n) × n/2</code>;</li><li>欧拉定理：如果 <code>n,a</code> 互质，且均为正整数，则 <code>a^ϕ(n)≡1(mod n)</code>;</li></ul><hr><p><strong>下面的代码可以在 <code>O(n)</code> 的时间复杂度内求出 <code>1∼n</code> 中所有数的欧拉函数：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], euler[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 质数存在primes[]中，euler[i] 表示i的欧拉函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    euler[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">        {</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            euler[i] = i - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        {</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                euler[i * primes[j]] = euler[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            euler[i * primes[j]] = euler[i] * (primes[j] - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针法解题模板</title>
      <link href="/2022/03/26/basic-algorithm-template/shuang-zhi-zhen-fa/"/>
      <url>/2022/03/26/basic-algorithm-template/shuang-zhi-zhen-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针法解题模板"><a href="#双指针法解题模板" class="headerlink" title="双指针法解题模板"></a>双指针法解题模板</h1><p>存在两种情况：</p><ul><li>双指针从同一边根据某种规律进行移动；</li><li>双指针从两边开始向内移动根据某种规律。</li></ul><h2 id="27-移除元素-情况二"><a href="#27-移除元素-情况二" class="headerlink" title="27. 移除元素 情况二"></a><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素</a> <strong>情况二</strong></h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要<strong>原地</strong>移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并<strong>原地</strong>修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++) {</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != val) {</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-盛最多水的容器-情况二"><a href="#11-盛最多水的容器-情况二" class="headerlink" title="11. 盛最多水的容器 情况二"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">11. 盛最多水的容器</a> <strong>情况二</strong></h2><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code>。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code>和<code>(i, 0)</code>。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>解题思路：双指针，从两端触发，找规律，对短的一边进行移动。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> Math.min(height[l], height[r]) * (r - l);</span><br><span class="line">            ans = Math.max(ans, area);</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt;= height[r]) {</span><br><span class="line">                ++l;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                --r;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转关联问题</title>
      <link href="/2022/03/25/basic-algorithm-template/fan-zhuan-guan-lian-wen-ti/"/>
      <url>/2022/03/25/basic-algorithm-template/fan-zhuan-guan-lian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="翻转关联问题"><a href="#翻转关联问题" class="headerlink" title="翻转关联问题"></a>翻转关联问题</h1><p>翻转某一个节点，其相邻节点发生翻转，由初始状态翻转为目标状态需要几步。</p><ul><li>关于翻转问题其每个节点最多翻转一次。</li><li>针对简单翻转问题，考虑使用针对当前节点和最终状态节点情况判断，是否需要进行翻转。（适用于个别情况）</li></ul><h2 id="例题：1208-翻硬币"><a href="#例题：1208-翻硬币" class="headerlink" title="例题：1208. 翻硬币"></a>例题：<strong><a href="https://www.acwing.com/problem/content/1210/">1208. 翻硬币</a></strong></h2><p>小明正在玩一个“翻硬币”的游戏。桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。</p><p>比如，可能情形是：<code>**oo***oooo</code>，如果同时翻转左边的两个硬币，则变为：<code>oooo***oooo</code>。现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</p><p>我们约定：把翻动相邻的两个硬币叫做一步操作。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>两行等长的字符串，分别表示初始状态和要达到的目标状态。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数，表示最小操作步数</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>输入字符串的长度均不超过100。数据保证答案一定有解。</p><p>解题：由于字符串长度不超过100，所以使用 <code>DFS</code> 会出现递归栈越界问题。所以考虑使用针对当前节点和最终状态节点情况判断，是否需要进行翻转。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">char</span>[] a = scanner.next().toCharArray();</span><br><span class="line">    <span class="type">char</span>[] b = scanner.next().toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (a[i] != b[i]) {</span><br><span class="line">            res++;</span><br><span class="line">            a[i] = a[i] == <span class="string">'*'</span>? <span class="string">'o'</span>: <span class="string">'*'</span>;</span><br><span class="line">            a[i + <span class="number">1</span>] = a[i + <span class="number">1</span>] == <span class="string">'*'</span>? <span class="string">'o'</span>: <span class="string">'*'</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    System.out.println(res);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
            <tag> 翻转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找模板</title>
      <link href="/2022/03/25/basic-algorithm-template/er-fen-cha-zhao-mo-ban/"/>
      <url>/2022/03/25/basic-algorithm-template/er-fen-cha-zhao-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找模板"><a href="#二分查找模板" class="headerlink" title="二分查找模板"></a>二分查找模板</h1><p>二分模板一共有两个，分别适用于不同情况。<br>算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l = r时，我们就找到了目标值。</p><p><strong>使用方法</strong>：一维数组，基于<code>index</code>的二分查找，基于<code>(nums[0], nums[n - 1])</code>的二分查找。</p><p>二维数组，使用方法一样，但是思路上是每次进行必要的函数<code>check(mid)</code>——需要自己编写。<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/">378. 有序矩阵中第 K 小的元素</a></p><h2 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h2><p>当我们将区间<code>[l, r]</code>划分成<code>[l, mid]</code>和<code>[mid + 1, r]</code>时，其更新操作是<code>r = mid</code>或者<code>l = mid + 1</code>;，计算<code>mid</code>时不需要加1。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h2><p>当我们将区间<code>[l, r]</code>划分成<code>[l, mid - 1]</code>和<code>[mid, r]</code>时，其更新操作是<code>r = mid - 1</code>或者<code>l = mid</code>;，此时为了防止死循环，计算<code>mid</code>时需要加1。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-搜索插入位置"><a href="#1-搜索插入位置" class="headerlink" title="1. 搜索插入位置"></a>1. 搜索插入位置</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>, ans = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> ((right - left) &gt;&gt; <span class="number">1</span>) + left;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= nums[mid]) {</span><br><span class="line">            ans = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：对连续的两个排列数组进行二分搜索</p></blockquote><h4 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h4><p>升序排列的整数数组 <code>nums</code> 在预先未知的某个点上进行了旋转（例如，<code>[0,1,2,4,5,6,7]</code>经旋转后可能变为<code>[4,5,6,7,0,1,2]</code>）。</p><p>请你在数组中搜索<code>target</code>，如果数组中存在这个目标值，则返回它的索引，否则返回 <code>-1</code> 。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] == target ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) {</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[mid]) {</span><br><span class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) {</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="number">1</span>]) {</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-两数相除"><a href="#2-两数相除" class="headerlink" title="2. 两数相除"></a>2. 两数相除</h3><h4 id="29-两数相除"><a href="#29-两数相除" class="headerlink" title="29. 两数相除"></a><a href="https://leetcode-cn.com/problems/divide-two-integers/">29. 两数相除</a></h4><p>给定两个整数，被除数 <code>dividend</code> 和除数 <code>divisor</code>。将两数相除，要求不使用乘法、除法和 <code>mod</code> 运算符。返回被除数 <code>dividend</code> 除以除数 <code>divisor</code> 得到的商。整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8 以及 truncate(-2.7335) = -2</code>。</p><p><strong>解题思路</strong>：二分 + 倍增乘法解法，首先判断是否存在负数，先进行取符号，然后正数进行运算。二分法取值范围为<code>[0, dividend]</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line">        <span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> a, y = b;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNeg</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> ((x &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>) || (x &lt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>)) isNeg = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span>) y = -y;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = x;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (mul(mid, y) &lt;= x) {</span><br><span class="line">                l = mid;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> isNeg ? -l : l;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; Integer.MAX_VALUE || ans &lt; Integer.MIN_VALUE) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">long</span> <span class="title function_">mul</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> k)</span> {</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> ((k &amp; <span class="number">1</span>) == <span class="number">1</span>) ans += a;</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a += a;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法模板 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
